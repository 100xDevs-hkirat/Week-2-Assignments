/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
const port = 3080;
app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
});

app.use(bodyParser.json());

module.exports = app;

let todos = [];
let todosId = 1; //Autogenerated column value for the saved todos.

//adding a new todo
app.post("/todos", (req, res) => {
    const request = req.body;
    let id = todosId++;
    let todo = {...request, id: id};

    fs.readFile('todos.txt', 'utf8', (err, data) => {
        if (err) {
            console.log(err.message);
        }
        const todos = JSON.parse(data);
        todos.push(todo);
        fs.writeFile('todos.txt', JSON.stringify(todos), (err) => {
            if (err) {
                console.log(err.message);
            }
        });
    });
    // todos.push({...todo,id:id});
    res.status(201).send({id: id});
});

//get all todos
app.get("/todos", (req, res) => {
    fs.readFile('todos.txt', 'utf8', (err, data) => {
        if (err) {
            console.log(err.message);
        } else {
            let fileData = JSON.parse(data);
            res.json(fileData);
        }
    });
});

//To retrieve a particular todo
app.get("/todos/:id", (req, res) => {
    const id = Number(req.params.id);
    let isTodoPresent = false;
    fs.readFile('todos.txt', 'utf8', (err, data) => {
        if (err) {
            console.log(err.message);
        } else {
            const todos = JSON.parse(data);
            for (let todo of todos) {
                if (todo.id === id) {
                    isTodoPresent = true;
                    res.send(todo);
                }
            }
            if (!isTodoPresent)
                res.status(404).send("Not found");
        }
    });
});

app.put("/todos/:id", (req, res) => {
    const id = Number(req.params.id);
    const {title, description, completed} = req.body;
    let isTodoPresent = false;
    fs.readFile('todos.txt', 'utf8', (err, data) => {
        if (err) {
            console.log(err.message);
        } else {
            const todos = JSON.parse(data);
            for (let todo of todos) {
                if (todo.id === id) {
                    isTodoPresent = true;
                    todo.title = title;
                    todo.description = description;
                    todo.completed = completed;
                    fs.writeFile('todos.txt', JSON.stringify(todos), (err) => {
                        if (err) {
                            console.log(err.message);
                        }
                    });
                    res.send();
                }
            }
            if (!isTodoPresent)
                res.status(404).send("Not found");
        }
    });
});

app.delete("/todos/:id", (req, res) => {
    const id = Number(req.params.id);
    let isTodoPresent = false;
    fs.readFile('todos.txt', 'utf8', (err, data) => {
        if (err) {
            console.log(err.message);
        } else {
            const todos = JSON.parse(data);
            for (let i=0;i<todos.length;i++) {
                if (todos[i].id === id) {
                    isTodoPresent = true;
                    todos.splice(i, 1);
                    fs.writeFile('todos.txt', JSON.stringify(todos), (err) => {
                        if (err) {
                            console.log(err.message);
                        }
                    });
                    res.send();
                }
            }
            if (!isTodoPresent)
                res.status(404).send("Not found");
        }
    });
});
