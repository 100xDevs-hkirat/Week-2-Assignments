/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const fs = require('fs');
const app = express();
const bodyParser = require('body-parser')
app.use(bodyParser.json());

function callTodos(req,res){
  fs.readFile('todos.json','utf-8',(err,data)=>{
    if(err){
      throw err;
    }else{
      res.json(JSON.parse(data));
    }
  })
}

function callbyId(req,res){
  fs.readFile('todos.json','utf-8',(err,data)=>{
    if(err){
      throw err;
    }else{
      let data2 = JSON.parse(data);
      let todo = null;
      for(let i=0;i<data2.length;i++){
        if(data2[i].id === parseInt(req.params.id)){
          todo = data2[i];
        }
      }
      if(todo){
        res.json(todo);
      }else{
        res.status(404).send();
      }

    }
  })
}

function postTodos(req,res){
  let todo = {
    id: Math.floor(Math.random() * 1000000),
    title : req.body.title,
    description : req.body.description,
  };
  fs.readFile('todos.json','utf-8',(err,data)=>{
    if(err){
      throw err;
    }else{
      let data2 = JSON.parse(data);
      data2.push(todo);
      fs.writeFile('todos.json',JSON.stringify(data2),(err)=>{
        if(err) throw err;
        res.status(201).send(todo);
      })
    }    
  })
}

function putTodos(req,res){
  const id = parseInt(req.params.id);
  fs.readFile('todos.json','utf-8',(err,data)=>{
    if(err) throw err;
    let data2 = JSON.parse(data);
    let newTodo = null;
    for(let i=0;i<data2.length;i++){
      if(data2[i].id === parseInt(req.params.id)){
        data2[i].title = req.body.title;
        data2[i].description = req.body.description;
        newTodo = data2[i];
        break;
      }
    }
    if(newTodo){
      fs.writeFile('todos.json',JSON.stringify(data2),(err)=>{
        if(err) throw err;
        res.status(200).send(newTodo);
      })
    }else{
      res.status(404).send();
    }
  })
}

function deleteTodos(req,res){
  fs.readFile('todos.json','utf-8',(err,data)=>{
    let data2 = JSON.parse(data);
    let found = false;
    for(let i=0;i<data2.length;i++){
      if(data2[i].id === parseInt(req.params.id)){
        data2.splice(i,1);
        found = true;
        break;
      }
    }if(found){
      fs.writeFile('todos.json',JSON.stringify(data2),(err)=>{
      if(err) throw err;
      res.status(200).send();
    })
    }else{
      res.status(404).send();
    }
  })
}

app.get('/todos',callTodos);
app.get('/todos/:id',callbyId);
app.post('/todos',postTodos);
app.put('/todos/:id',putTodos);
app.delete('/todos/:id',deleteTodo);

app.all('*',(req,res)=>{
  res.status(404).send();
})

module.exports = app;