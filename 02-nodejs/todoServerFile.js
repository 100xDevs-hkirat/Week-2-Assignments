/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
const port = 3001
let genid = 0;


app.use(bodyParser.json());

// 1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos

app.get('/todos', (req, res) => {
    fs.readFile('allTodos.json', 'utf-8', (err, data) => {
        if (err) {
            console.error(err);
            return
        }
        else {
            res.json(JSON.parse(data))
        }
    })
})

// 2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123

app.get('/todos/:id', (req, res) => {
    let id = req.params.id
    fs.readFile('allTodos.json', 'utf-8', (err, data) => {
        if (err) {
            console.error(err)
            return
        }
        else {
            let allTodos = JSON.parse(data);
            let requiredTodo = allTodos.find(obj => obj.id == id)
            if (requiredTodo) {
            res.status(200).json(requiredTodo)
            }
            else res.sendStatus(404)
        }
        
    })
})

// 3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

app.post('/todos', (req, res) => {
    const newTodo = {
        id : Math.random()*100000,
        title : req.body.title,
        completed : req.body.completed,
        description : req.body.description
    }

    fs.readFile('allTodos.json', 'utf-8', (err, data) => {
        if (err) {
            console.error(err);
            return
        }
        else {
            let allTodos = JSON.parse(data);
            allTodos.push(newTodo);
            fs.writeFile('allTodos.json', JSON.stringify(allTodos), err => {
                if (err) {
                    console.error(err);
                }
                else {
                    res.status(201).json(newTodo)
                }
            })
        }
    })
})

// 4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }

app.put('/todos/:id', (req, res) => {
    let id = req.params.id;
    let item  = req.body;

    fs.readFile('allTodos.json', 'utf-8', (err, data) => {
        if (err) {
            console.error(err);
            return
        }
        else {
            let allTodos = JSON.parse(data);
            let requiredTodo = allTodos.find(obj => obj.id == id);
            if (requiredTodo) {
                for (let keys of Object.keys(item)) {
                    requiredTodo[keys] = item[keys]
                }
                fs.writeFile('allTodos.json', JSON.stringify(allTodos), err => {
                    if (err) {
                        console.error(err);
                    }
                    else {
                        res.status(200).send('OK')
                    }
                })
                }
            else {
                res.status(404).send('Not Found')
            }
        }
    })
})

// 5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

app.delete('/todos/:id', (req, res) => {
    let id = req.params.id;
    let index = 0;

    fs.readFile('allTodos.json', 'utf-8', (err, data) => {
        if (err) {
            console.error(err);
            return
        }
        else {
            let allTodos = JSON.parse(data);
            for (let i=0; i<allTodos.length; i++) {
                if (allTodos[i].id == id) {
                index = i;
                break
                }
            }
            allTodos.splice(index, 1)
            
            fs.writeFile('allTodos.json', JSON.stringify(allTodos), err => {
                if (err) {
                    console.error(err);
                    return
                }
                else {
                    res.status(200).send('OK')
                }
            })
        }
    })
})



app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})

module.exports = app;
  