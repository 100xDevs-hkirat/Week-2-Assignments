/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
let todo_list = [];
const fs = require('fs');
const path = require('path');
const {v4: uuidv4} = require('uuid');
const app = express();

app.use(bodyParser.json());
const route_checker = (req, res, next) =>{
  if(req.url.includes('/todos'))
    next();
    else{
      res.status(404).send('Not Found');
    }
}
app.use(route_checker);

const fetchAllTodoItems = (req, res) => {
  // const readContent = (err, data) => {
  //   if(!err){
  //     const lines = data.trim().split('\n');
  //     for(item of lines.map((line) => JSON.parse(line)))
  //     todo_list.push(...item);
  //   }
  //   res.status(200).send(todo_list);
  // }
  // fs.readFile(path.resolve(__dirname, 'TodoListFile.json'), 'utf8', readContent);
  res.status(200).send(todo_list);
}

const fetchSpecificTodoItem = (req, res) => {
  const id = req.params['id'];
  let found = false;
  todo_list.forEach((item) => {
    if(item.id === id){
      found = true;
      res.status(200).send(item);
    }
  });
  // If no match is found send back an error message with status code of 'Not Found'
  if(!found){
    res.status(404).send('Not Found');
  }
}
const createTodo = (req, res) => {
  req.body.id = uuidv4();
  todo_list.push(req.body);
  fs.appendFile(path.resolve(__dirname, 'TodoListFile.json'), JSON.stringify(todo_list) + '\n', (err) => {});
  res.status(201).send({id: req.body.id});
}
const updateTodoItem = (req, res) => {
  const itemToUpdateId = req.params["id"];
  let found = false;
  todo_list.forEach((item) => {
    if(item.id === itemToUpdateId){
      found = true;
      if(req.body.title) item.title = req.body.title;
      if(req.body.completed) item.completed = req.body.completed;
      if(req.body.description) item.description = req.body.description; 
      res.status(200).send(item);
    }
  });
  // If no match is found send back an error message with status code of 'Not Found'
  if(!found){
    res.status(404).send('Not Found');
  }
} 
const deleteTodoItem = (req, res) => {
  const itemIdToDelete = req.params['id'];
  let found = false, indexCounter = 0;
  todo_list.forEach((item) => {
    if(item.id === itemIdToDelete){
      found = true;
      todo_list.splice(indexCounter, 1);
      res.status(200).send('Item Deleted Successfully');
    }
    indexCounter += 1;
  });
  // If no match is found send back an error message with status code of 'Not Found'
  if(!found){
    res.status(404).send('Not Found');
  }
}
app.get('/todos', fetchAllTodoItems);
app.get('/todos/:id', fetchSpecificTodoItem);
app.post('/todos', createTodo);
app.put('/todos/:id', updateTodoItem);
app.delete('/todos/:id', deleteTodoItem);

//app.listen(3010, console.log(`server is running on 3010`));

module.exports = app;
