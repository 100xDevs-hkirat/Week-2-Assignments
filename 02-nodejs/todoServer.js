/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item. 
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

function findIndex(arr, id) {
  let size = arr.length;
  for (let i = 0; i < size; ++i) {
    if (arr[i].id == id) {
      return i;
    }
  }
  return -1;
}

app.get("/todos", (req, res) => {
  fs.promises
    .readFile("todos.json", "utf-8")
    .then((data) => {
      res.send(data);
    })
    .catch((err) => {
      res.status(404).send("Unable to access the file");
    });
});

app.get("/todos/:id", (req, res) => {
  const idToSearch = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) {
      res.status(404).send("Unable to access the file");
    }
    let todos = JSON.parse(data);
    let index = findIndex(todos, idToSearch);
    if (index == -1) {
      res.sendStatus(404);
    }
    res.send(todos[index]);
  });
});

app.post("/todos", (req, res) => {
  const newId = parseInt(Math.random() * 100000);
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Some error with server");
    }
    let obj = JSON.parse(data);
    let newObj = {
      id: newId,
      title: req.body.title,
      description: req.body.description,
      completed: req.body.completed,
    };
    obj.push(newObj);
    fs.writeFile("./todos.json", JSON.stringify(obj), (err) => {
      if (err) {
        throw err;
      }
      res.status(201).json({ id: newId });
    });
  });
});

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Something wrong on server side..");
    }
    const obj = JSON.parse(data);
    const index = findIndex(obj, id);
    if (index === -1) {
      res.sendStatus(404);
    }
    obj[index].title = req.body.title;
    obj[index].description = req.body.description;

    fs.writeFile("./todos.json", JSON.stringify(obj), (err) => {
      if (err) {
        res.status(500).send("Something wrong on server side..");
      }
      res.json(obj[index]);
    });
  });
});

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) throw err;
    const objects = JSON.parse(data);
    const index = findIndex(objects, id);
    if (index === -1) {
      res.sendStatus(404);
    }
    objects.splice(index, 1);

    fs.writeFile("./todos.json", JSON.stringify(objects), (err) => {
      if (err) {
        res.status(500).send("Something wrong on server side..");
      }
      res.sendStatus(200);
    });
  });
});

module.exports = app;
