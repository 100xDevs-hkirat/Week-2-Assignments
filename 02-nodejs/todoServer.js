/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

var todos = [];

app.use(bodyParser.json());


function getTodos() {
  return todos;
}

function getTodoById(id) {
  return todos[id-1];
}

function createTask(title, description){
  var newTask = {
    id: todos.length + 1,
    title: title,
    description: description,
    completed: false
  }
  todos.push(newTask);
  return newTask;
}

function updateTask(id, title, description){
  todos[id-1].title = title;
  todos[id-1].description = description;
}

function deleteTask(id){
  todos.splice(id-1,1);
  return todos;
}

app.get('/todos', (req,res)=>{
  res.status(200).json(getTodos());
})

app.get('/todos/:id', (req,res)=>{
  var id = req.params.id;
  if(id-1 < todos.length){
    res.status(200).json(getTodoById(id));
  } else {
    res.status(404).send('Not Found');
  }
})

app.post('/todos', (req,res)=>{
  var newTask = createTask(req.body.title, req.body.description);
  res.status(201).json(newTask);
})

app.put('/todos/:id', (req,res) => {
  var todoIndex = parseInt(req.params.id);
  if (todoIndex > todos.length) {
    res.status(404).send();
  } else {
    updateTask(todoIndex, req.body.title, req.body.description);
    res.json(todos[todoIndex]);
  }
}) 

app.delete('/todos/:id', (req,res) => {
  var id = req.params.id;
  if(id <= todos.length){
    var deletedTask = deleteTask(id);
    res.status(200).json(deletedTask);
  } else {
    res.status(404).send('Not Found');
  }
})

// app.listen(port, () => {
//   console.log(`Server listening at http://localhost:${port}`);
// });

app.use((req,res,next)=>{
    res.status(404).send('Not Found');
})
module.exports = app;
