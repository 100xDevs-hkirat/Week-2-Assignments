/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());


var allTodo = [

]; 


function getAllTodo(req, res) {
  res.status(200).send(allTodo);
}
app.get("/todos", getAllTodo);

function getSpecificTodo(req, res) {
  const todoId = req.params.id;
  const foundToDo = allTodo.find(todo => todo.id === todoId);
  if(foundToDo) {
    res.status(200).send(foundToDo);
  }else{
    res.status(404).json({error : "Todo is not available"})
  }
}
app.get("/todos/:id", getSpecificTodo);

function createTodo(req, res) {
  const userTodo = { "id" :  uuidv4(), "title": req.body.title, "completed": req.body.completed, description: req.body.description }
  allTodo.push(userTodo);
  res.send(`Todo Created Successfully and id id ${userTodo.id}`)
}
app.post("/todos", createTodo);

function firstHandleFunction(req, res) {
  res.send("Hello world!");
}
app.get("/",firstHandleFunction)

function updateTodo(req, res){
  const userTodoId = req.params.id;
  const foundToDoIndex = allTodo.findIndex(todo => todo.id === userTodoId);

  if(foundToDoIndex !== -1){
    allTodo[foundToDoIndex].title = req.body.title || allTodo[foundToDoIndex].title;
    allTodo[foundToDoIndex].description = req.body.description || allTodo[foundToDoIndex].description;
    allTodo[foundToDoIndex].completed = req.body.completed || completed;
  
    res.json(allTodo[foundToDoIndex]);
  }else{
    res.status(404).json({error : "Item Not Available."});
  }
}
app.put("/todos/:id", updateTodo);

function deleteTodo(req, res) {
  const userTodoId =  req.params.id;

  console.log("userTodoId   =>>>>>   "+ userTodoId);

 const index = allTodo.findIndex(todo => todo.id === userTodoId);

 console.log("index   =>>>>>   "+ index);

 allTodo.splice(index, index)

 console.log("aLL TODOS ->>>>>>>>>>>>>>   "+ allTodo);

 res.send(allTodo);
}
app.delete("/todos/:id", deleteTodo);

function serverFn() {
  console.log(`Server is listening on port ${PORT} `);
}
app.listen(PORT, serverFn);

module.exports = app;
