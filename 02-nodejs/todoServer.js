/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const todos = require("./todos.json");
const app = express();

const todosFile = path.join(__dirname, "todos.json");
const PORT = 5000;

app.use(bodyParser.json());

app.get("/", (req, res) => {
  return res.send("Hello World !");
});

// Get all todos
app.get("/todos", (req, res) => {
  return res.status(200).json(todos);
});

// Get a specific todo by ID
app.get("/todos/:id", (req, res) => {
  const id = req.params.id;

  const todo = todos.filter((todo) => todo.id == id);

  if (todo.length > 0) res.status(200).json(todo);
  else res.sendStatus(404);
});

app.post("/todos", (req, res) => {
  const { description, title, completed } = req.body;

  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      console.error(err);
      return res.status(500).send("Error reading todos file");
    }

    let todos = JSON.parse(data);
    console.log("Existing Todos:", todos);

    let todo = {
      id: todos.length + 1,
      title,
      description,
    };
    todos.push(todo);
    console.log(todos);
    todos = JSON.stringify(todos);
    console.log("Updated Todos (Stringified):", todos);

    const jsonData = JSON.stringify(todos);

    fs.writeFile("./todos.json", jsonData, (error) => {
      return error;
    });
    console.log("File written successfully");
    res.sendStatus(201);
  });
});

app.listen(PORT, () => {
  console.log("Server is running on port", PORT);
});

module.exports = app;
