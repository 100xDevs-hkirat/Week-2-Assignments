/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a descriptionription. The title is a string and the descriptionription is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Descriptiondescriptionription: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Descriptiondescriptionription: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Descriptiondescriptionription: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, descriptionription: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Descriptiondescriptionription: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Descriptiondescriptionription: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const { v4: uuidv4 } = require("uuid");

app.use(bodyParser.json());

const todos = [];

function getTodos(req, res) {
  res.status(200).json(todos);
}

function getTodoByID(req, res) {
  const id = req.params.id;
  const todoFound = todos.find((todo) => todo.id === id);
  if (todoFound) {
    res.json(todoFound);
  } else {
    res.status(404).send();
  }
}

function postTodos(req, res) {
  const newTodo = {
    id: uuidv4(),
    title: req.body.title,
    description: req.body.description,
    // completed: completed,
  };

  todos.push(newTodo);
  res.status(201).send();
}

function updateTodoByID(req, res) {
  const id = req.params.id;
  const idx = todos.findIndex((todo) => todo.id === id);
  if (idx === -1) {
    res.status(404).send();
  } else {
    todos[idx].title = req.body.title;
    todos[idx].description = req.body.description;
    // todos[idx].completed = req.body.completed;
    res.status(200).send();
  }
}

function deleteTodoByID(req, res) {
  const id = req.params.id;
  const idx = todos.findIndex((todo) => todo.id === id);
  if (idx == -1) {
    res.status(404).send();
  } else {
    todos.splice(idx, 1);
    res.status(200).send();
  }
}

app.get("/todos", getTodos);
app.get("/todos/:id", getTodoByID);
app.post("/todos", postTodos);
app.put("/todos/:id", updateTodoByID);
app.delete("/todos/:id", deleteTodoByID);

app.all("*", (req, res) => {
  res.status(404).send();
});

// app.listen(3000, () => {
//   console.log("crush 3000...");
// });

module.exports = app;
