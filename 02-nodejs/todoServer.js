/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json());

// app.use(validateBody);

const myTodos = new Map();
const bodyFormat = new Set(['title','description','completed']);

function validateBody(req,res,next){
  console.log(myTodos);
  if (req.method == 'POST' || req.method =='PUT'){

    const reqBody = req.body;

    for (const key in reqBody){
      if (!bodyFormat.has(key))
        res.status(401).send();
    }

  }
  next();
}



function getAllTodos(req,res){

  const result = [];

  for (const vals of myTodos.values()){
    result.push(vals);
  }
  console.log(result);
  return res.status(200).json(result);
}

function getUID(length =6){
  return (Math.random()*1000).toString().substring(4,length+2);
}

function postTodos(req,res) {

  const reqBody = req.body;
  
  const toSaveObj = reqBody;
  const id = getUID();

  myTodos.set(id,toSaveObj);

  res.status(201).json({id:id});
  //validating reqBody handled
}

function getTodosById(req,res){

  const id = req.params.id;

  if (myTodos.has(id)){
    const dataWithId = myTodos.get(id);
    dataWithId.id = id;
    res.status(200).json(dataWithId);
    return;
  }

  res.sendStatus(404);

}

function deleteById(req,res){
  const id = req.params.id;

  if (!myTodos.has(id)){
    res.sendStatus(404);
    return;
  }

  myTodos.delete(id);
  res.sendStatus(200);

}

function updatedTodo(req,res) {

  const id = req.params.id;
  const content = req.body;
  if(!myTodos.has(id)){
    res.sendStatus(404);
    return;
  }

  myTodos.set(id,content);
  res.sendStatus(200);

}



app.get('/todos',getAllTodos);
app.get('/todos/:id',getTodosById);
app.post('/todos',postTodos);
app.delete('/todos/:id',deleteById);
app.put('/todos/:id',updatedTodo);

app.use('*',(req, res) => {
  res.sendStatus(404);
});

module.exports = app;
