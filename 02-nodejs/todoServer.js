/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

// app.listen('3000',()=>{
//   console.log('app is running on port 3000');

// });

app.set('uniquId',0);
app.set('todoCollection',[]);

async function getDatafromFile(){
   var data = await fs.promises.readFile('./files/a.txt','utf8');
   if(data){
    app.set('todoCollection',JSON.parse(data));
   }
   else{
    app.set('todoCollection',[]);
   }
   
}

async function updateDatatoFile(){
  var data = await fs.promises.writeFile('./files/a.txt',JSON.stringify(app.get('todoCollection')));
}

app.get('/todos',async (req,res)=>{
      await getDatafromFile();
      res.status(200).send(app.get('todoCollection'));
});

app.get('/todos/:id',async (req,res)=>{
  const id = req.params.id;
  await getDatafromFile();
  const dbArray = app.get('todoCollection');
  const isPresent = dbArray.some((x)=>x.id==id);
  if(isPresent){
    res.status(200).send(dbArray.filter(x=>x.id==id)[0]);
  }
  else{
    res.sendStatus(404);
  }
})

app.post('/todos',async (req,res)=>{
      await getDatafromFile();
      const dbArray = app.get('todoCollection');
      let maxId = dbArray.reduce((max,c)=>{
        if(c.id>max){
          max = c.id;
        }
        return max;
      },0);
      console.log(maxId);
      const id = maxId+1;
      const todoItem = { "id":id,"title": req.body.title, "completed": req.body.completed, "description": req.body.description };
      dbArray.push(todoItem);
      app.set('todoCollection',dbArray);
      await updateDatatoFile();
      res.status(201).send({"id":id});
})

app.put('/todos/:id',async (req,res)=>{
  const id = req.params.id;
  await getDatafromFile();
  const dbArray = app.get('todoCollection');
  const index = dbArray.findIndex(x=>x.id==id);
  if(index !== -1){
    const dbitem = dbArray[index];
    const updatedObj = {...dbitem,...req.body}
    dbArray[index] = updatedObj;
    app.set('todoCollection',dbArray);
    await updateDatatoFile();
    res.sendStatus(200);
  }
  else{
    res.sendStatus(404);
  }
})

app.delete('/todos/:id',async (req,res)=>{
  const id = req.params.id;
  await getDatafromFile();
  const dbArray = app.get('todoCollection');
  const index = dbArray.findIndex(x=>x.id==id);
  if(index !== -1){
    dbArray.splice(index,1);
    app.set('todoCollection',dbArray);
    await updateDatatoFile();
    res.sendStatus(200);
  }
  else{
    res.sendStatus(404);
  }
})

function getNextId(){
    const nextId = app.get('uniquId') + 1;
    app.set('uniquId',nextId);
    return nextId;
}

module.exports = app;
