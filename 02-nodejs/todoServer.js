/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const port = 3000;
const path = require("path"),
  filePath = path.join(__dirname, "./files/todo.txt");
const { v4: uuidv4 } = require("uuid");

const app = express();

app.use(bodyParser.json());

async function readFile() {
  const data = fs.readFileSync(filePath, "utf-8", (err, data) => {
    if (err) {
      console.log("Error occur", err);
      return;
    }
  });
  return data;
}

async function writeFile(content) {
  fs.writeFile(filePath, content, (err) => {
    if (err) {
      console.log("Error occur", err);
      return;
    }
    console.log("file wrote successfully.");
  });
}

async function getAllTodos(req, res) {
  readFile().then((data) => {
    res.send(data);
  });
}

async function getSingleTodos(req, res) {
  const id = req.params.id;
  readFile().then((data) => {
    const newData = eval(data);
    const singleTodos = newData.find((data) => data.id === id);
    if (singleTodos !== undefined) res.status(200).send(singleTodos);
    else res.status(404).send("Item not found.");
  });
}

async function createTodos(req, res) {
  const uuid = uuidv4();
  const obj = req.body;
  if (Object.keys(obj).length === 0) {
    res.status(404).send("Item can not be empty.");
    return;
  }
  obj["id"] = uuid;
  readFile()
    .then((data) => {
      const newData = eval(data);
      newData.push(obj);
      const newDataToString = JSON.stringify(newData);
      writeFile(newDataToString);
    })
    .then(() => res.status(201).send("Item Created Successfully."));
}

async function updateTodos(req, res) {
  const id = req.params.id;
  const obj = req.body;
  let updatedFlag = false;
  if (Object.keys(obj).length === 0) {
    res.status(404).send("Updated Item can not be empty.");
    return;
  }
  readFile()
    .then((data) => {
      const newData = eval(data);
      const updatedData = newData.map((data) => {
        if (data.id === id) {
          updatedFlag = true;
          return obj;
        } else {
          return data;
        }
      });
      const newUpdatedDataToString = JSON.stringify(updatedData);
      writeFile(newUpdatedDataToString);
    })
    .then(() => {
      if (updatedFlag === true)
        res.status(200).send("Todo item updated successfully.");
      else res.status(404).send("Item not found.");
    });
}

async function deleteTodos(req, res) {
  const id = req.params.id;
  let deleteFlag = false;
  readFile().then((data) => {
    const newData = eval(data);
    const deletedTodos = newData.filter((data) => {
      if (data.id !== id) return data;
      else {
        deleteFlag = true;
        return;
      }
    });
    const newDeletedTodoToString = JSON.stringify(deletedTodos);
    writeFile(newDeletedTodoToString);
    if (deleteFlag === true)
      res.status(200).send("Todo item was found and deleted successfully.");
    else res.status(404).send("Item not found.");
  });
}

app.get("/todos", getAllTodos);

app.get("/todos/:id", getSingleTodos);

app.post("/todos", createTodos);

app.put("/todos/:id", updateTodos);

app.delete("/todos/:id", deleteTodos);

app.all("*", (req, res) => {
  res.status(404).send("Error 404 occured");
});

module.exports = app;
