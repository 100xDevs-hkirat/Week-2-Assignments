/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const port=3000;
let todos=[]
const app = express();

app.use(bodyParser.json());
// function todobyid(todo){
//   return todo.id === id;
// }
//first task -- sending the todo array
function firsttask(req,res) 
{
    res.json(todos)
  
}
//task-2 grabing the id if the todo
function secondtask(req,res){
 const id=req.params.id;
 const todo=todos.find((todo)=>todo.id === id);
 if(todo){
  res.json(todos);
 }else{
  res.status(404).send('Todo not found');
 }
}
//task-3 sending the json object from the body
function thirdtask(req,res) {
  const id = Date.now().toString();
  var obj={

      id,
    "title": req.body.title,
    //"completed": req.body.completed,
    "description":req.body.description
  };
  console.log(obj);
  todos.push(obj);
  res.status(210).json({id});

}
// function fourthtask(req,res) {
//   const id=parseInt(req.params.id);
//   const todo=todos.findIndex((todo)=>todo.id===id);
//   if(todo=== -1){
//     res.status(404).send("Item not found");
//   }
//   else{
//     var obj={
//       id,
//       "todos[todo].title":req.body.title,
//       //"completed": req.body.completed,
//        " todos[todo].description":req.body.description,/// particular postion in array of objects
//     }
//     res.status(200).json(todos[todo]);
//   }
// }
app.put('/todos/:id', (req, res) => {
  const todoIndex = todos.findIndex(t => t.id === (req.params.id));
  if (todoIndex === -1) {
    res.status(404).send();
  } else {
    todos[todoIndex].title = req.body.title;
    todos[todoIndex].description = req.body.description;
    res.json(todos[todoIndex]);
  }
});
function fifthtask(req,res) {
  const id=req.params.id;
  const index =todos.find(t=>t.id===id);
  if(index===-1){
    res.status(404).send();
  }
  else{
    todos.splice(index,1);
    res.status(200).send(`${id} is deleted`);
  }
}
function started(req,res) {
  console.log(`Listnening to port ${port}`);
}
app.get("/todos",firsttask);
app.get("/todos/:id",secondtask);
app.post("/todos",thirdtask);
//app.put("todos/:id",fourthtask)
app.delete("/todos/:id",fifthtask)
app.listen(port,started);
module.exports = app;
