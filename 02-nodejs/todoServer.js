/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();
const cors = require('cors');


app.use(bodyParser.json());


let data =  [];

function fillDataFromFile(req,res,next)
{
  // fs.readFile('./files/a.txt','utf-8',(err,dataFromFile)=>{
  //    data = JSON.parse(dataFromFile);
  //    console.log(data);
  // })
  next();
}

app.use(cors());
//app.use(fillDataFromFile);
port = 3000;

let count = 0;

function getAllTodos(req,res)
{
  fs.readFile('./files/a.txt','utf-8',(err,dataFromFile)=>{
    data = JSON.parse(dataFromFile);
    console.log(data);
 })

   let textData = JSON.stringify(data);

  res.setHeader('Content-Type','application/json')
  res.end(textData);
  console.log(`Inside the get all todos - ${textData}`)
  
}

function createToDos(req,res)
{

  let ID = Math.floor((Math.random()*1000));

  //count++;
   data.push({id : ID,title : req.body.title,completed:req.body.completed, description : req.body.description});
   let textFile = JSON.stringify(data);
   fs.writeFile('./files/a.txt',textFile,(err,data)=>{
    console.log('data has been written in file')
   })
   console.log(data);
   res.status(201).send({id : ID,title : req.body.title,completed:req.body.completed, description : req.body.description})
}

function getToDobyId(req,res)
{
   let ID =req.params.id;
   let flag = false;
  console.log(req.id);
  for(let i =0 ;i<data.length;i++)
  {
    if(ID == data[i].id)
    {
      flag = true;
      res.send(data[i]);
    }

  }
  if(flag==false)
  {
  res.status(404).send('Data not found');
  }
}

function updateData(req,res)
{
  let ID =req.params.id;
   let flag = false;
   let flag1=false;
  console.log(req.body.id);
  for(let i =0 ;i<data.length;i++)
  {
    if(ID == data[i].id)
    {
      flag = true;
      if(req.body.title != null)
      {
        data[i].title = req.body.title;
        flag1 = true;
      }
      if(req.body.completed != null)
      {
        data[i].completed = req.body.completed;
        flag1 = true;
      }
      if(flag1)
      {
        res.status(201).send('Data update successfully');
      }
      
    }

  }
  if(flag==false)
  {
  res.status(404).send('Data not found');
  }
}

function deleteToDo(req,res)
{
  console.log(`Inside the delete function`)

    fs.readFile('./files/a.txt','utf-8',(err,dataFromFile)=>{

      console.log(dataFromFile)
    data = JSON.parse(dataFromFile)
    console.log(typeof(data));

    let indexToBeDeleted;


    indexToBeDeleted=data.findIndex((findData)=>{
      return findData.id==id;
   })
 
   data.splice(indexToBeDeleted,1);
 
   console.log(data);

   let updatedText = JSON.stringify(data);

   fs.writeFile('./files/a.txt',updatedText,(err)=>{
    if(err!=null)
    {
      console.log(err);
    }
   })

//  fs.writeFile('./files/a.txt',updatedText,(err)=>{

  if(err!=null)
  {
    
  res.status(404).send(`Error occured !`);
    console.log(err);
  }
  else {
    
  console.log(`Data is written in the file`);

  res.status(200).send('item has been deleted')
}

//  })


});
  let id = req.params.id;
  console.log('the id is',id);


  

  // for(let i = 0; i<data.length;i++)
  // {
  //   if(id == data[i].id)
  //   {
  //     indexToBeDeleted = i;
  //     console.log(indexToBeDeleted);
  //   }
  // }

  
//   console.log(data.splice(indexToBeDeleted-1,1));

//  let updatedText = JSON.stringify(data);

//  fs.writeFile('./files/a.txt',updatedText,(err)=>{

//   if(err!=null)
//   {
    
//   res.status(404).send(`Error occured !`);
//     console.log(err);
//   }
//   else {
    
//   console.log(`Data is written in the file`);

//   res.status(200).send('item has been deleted')
// }

//  })



 // res.status(200).send('item has been deleted')
}

app.get('/todos',getAllTodos)
app.post('/todos',createToDos)
app.get('/todos/:id',getToDobyId)
//app.put('/todos/:id',updateData)
app.delete('/todos/:id',deleteToDo)
app.listen(port,()=>{
  console.log(`listening on port ${port}`);
})

module.exports = app;