/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const fs = require('fs').promises;
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');
const port = 3000;
const filePath = __dirname + '/files/todolist.json';
let toDoListItems = [];
const app = express();
app.use(bodyParser.json());
app.use(readFileMiddleware);

function readFileMiddleware(req, res, next) {
  try {
    fs.readFile(filePath, 'utf-8').then((data) => {
      toDoListItems = JSON.parse(data);
      next();
    });
  } catch (err) {
    res.status(300, 'Error occurred while processing request');
  }
}

function getToDoItems(req, res) {
  res.send(toDoListItems);
}

function getToDoItem(req, res) {
  const id = req.params.id;
  const item = toDoListItems.find((item) => item.id == id);
  if (item) {
    res.send(item);
  } else {
    res.status(404).send('Item Not Found');
  }
}

function createToDoItem(req, res) {
  let item = req.body;
  item.id = uuidv4();
  toDoListItems.push(item);
  fs.writeFile(filePath, JSON.stringify(toDoListItems));
  res.status(201).json({ id: item.id });
}

function updateToDoItem(req, res) {
  let reqItem = req.body;
  let id = req.params.id;

  let itemToUpdate = toDoListItems.find((item) => item.id == id);
  if (itemToUpdate) {
    itemToUpdate.title = reqItem.title;
    itemToUpdate.completed = reqItem.completed;
    fs.writeFile(filePath, JSON.stringify(toDoListItems));
    res.send();
  } else {
    res.status(404).send('Item Not Found');
  }
}

function deleteToDoItem(req, res) {
  const id = req.params.id;
  const itemToDelete = toDoListItems.find((item) => item.id == id);
  if (itemToDelete) {
    const indexOfDelItem = toDoListItems.findIndex((item) => item.id == id);
    toDoListItems.splice(indexOfDelItem, 1);
    fs.writeFile(filePath, JSON.stringify(toDoListItems));
    res.send();
  } else {
    res.status(404).send('Item Not Found');
  }
}

app.get('/todos', getToDoItems);
app.get('/todos/:id', getToDoItem);
app.post('/todos', createToDoItem);
app.put('/todos/:id', updateToDoItem);
app.delete('/todos/:id', deleteToDoItem);
app.listen(port, () => console.log(`Listening for ${port}`));

module.exports = app;
