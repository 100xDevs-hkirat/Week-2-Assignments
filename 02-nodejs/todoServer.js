/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());


var port = 3000


var id = 0
var list = []

app.get('/todos', (req, res) => {
  res.json(list);
});


app.get('/todos/:id', (req, res) => {
  const todo = list.find(t => t.id === parseInt(req.params.id));
  if (!todo) {
    res.status(404).send();
  } else {
    res.json(todo);
  }
});


function addItem(req, res){
  
  var curr_id = id
  id++
  const newTodo = {
    id: curr_id, // unique random id
    title: req.body.title,
    description: req.body.description
  }
  list.push(newTodo)
  res.status(201).json(newTodo)
}

app.post('/todos', addItem)

function updateItem(req, res){
  var item_id = parseInt(req.params.id)
  var index = list.findIndex(obj => obj.id === item_id)
  if (index == -1){
    res.status(404).send("Todo Not found")
  }
  else{
    for (const [key, value] of Object.entries(req.body)){
      list[index][key] = value
    }
    res.status(200).json(list[index])
  }
}

app.put('/todos/:id', updateItem)

function deleteItem(req, res){
  var item_id = parseInt(req.params.id)
  var index = list.findIndex(obj => obj.id === item_id)
  if(index == -1){
    res.status(404).send("Todo Not found")
  }
  else{
    list.splice(index, 1)
    res.status(200).send("Todo deleted")
  }
}

app.delete('/todos/:id', deleteItem)

app.use((req, res, next) => {
  res.status(404).send();
});

//app.listen(port, () =>{"listening on port 3000"})

module.exports = app;

