/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

let TODOS = [];

app.use(bodyParser.json());

const writeTodo = () => {
  fs.writeFile("./files/todoData.txt", JSON.stringify(TODOS), (err) => {
    if (err) {
      console.log(err);
    }
  });
};

const readTodo = () => {
  fs.readFile("./files/todoData.txt", "utf8", (err1, content) => {
    if (err1) {
      console.log("Error while reading contents of the folder: " + err1);
      return null;
    } else {
      //console.log(JSON.parse(content));
      if (content.length > 0) TODOS = JSON.parse(content);
      //console.log(TODOS);
    }
  });
};

//let TODOS = readTodo();
readTodo();
app.get("/todos", (req, res) => {
  //readTodo();
  if (TODOS.length > 0) {
    return res.json(TODOS);
  }
});
app.get("/todos/:id", (req, res) => {
  //readTodo();
  if (TODOS.length === 0) {
    return res.status(404).send("No todo added");
  }

  let selectedTodo = TODOS.find((todo) => todo.id == req.params.id);
  //console.log(selectedTodo + "======" + req.params.id);
  if (!selectedTodo) {
    return res.status(404).send("Todo not found");
  }

  res.json(selectedTodo);
});
app.put("/todos/:id", (req, res) => {
  //readTodo();
  let todoid = req.params.id;
  let { title, completed } = req.body;
  todoid = TODOS.findIndex((todo) => todo.id == todoid);
  if (todoid == -1) {
    return res.sendStatus(404);
  }
  TODOS[todoid].title = title;
  TODOS[todoid].completed = completed;

  writeTodo();

  return res.json(TODOS[todoid]);
});

app.delete("/todos/:id", (req, res) => {
  //readTodo();
  let todoid = req.params.id;
  todoid = TODOS.findIndex((todo) => todo.id == todoid);
  if (todoid == -1) {
    return res.sendStatus(404);
  }
  TODOS.splice(todoid, 1);
  writeTodo();
  return res.sendStatus(200);
});

//{ "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
app.post("/todos", (req, res) => {
  //readTodo();
  let { title, completed, description } = req.body;
  if (!title) {
    return res.status(400).send("Empty title received! Enter a valid title");
  }
  let id = TODOS.length + 1;

  TODOS.push({
    id: id,
    title: title,
    completed: completed,
    description: description,
  });

  writeTodo();

  return res.status(201).json({ id: id });
});

app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

/* let port = 3003;
app.listen(3003, function () {
  console.log(`Demo application is listening on port ${port}`);
}); */

module.exports = app;
