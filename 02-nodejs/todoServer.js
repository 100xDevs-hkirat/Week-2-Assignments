/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const port = 3000;
const app = express();

app.use(bodyParser.json());

// module.exports = app;

callback = () =>
{
  console.log(`HTTP Server is running at port ${port}`)
}

app.listen(port , callback)

// 1> GET /todos

Todos = [] ;

getTODOS = (req ,res) =>
{
    res.json(Todos)
}

app.get(`/todos` , getTODOS)

// 2> GET /todos/:id

getID = (req , res) =>
{
    let foundID = Todos.find(arr => arr.id == parseInt(req.query.id))
    if (!foundID) {
      res.status(404).send("ID doesn't exist")
    } else {
      res.status(200).send(foundID)
    }
}

app.get(`/todos/:id` , getID)

// 3> POST /todos

postTODOS = (req , res) =>
{
    newTODO = {
      id : Math.floor(Math.random()*1000) ,
      title: req.body.title ,
      completed : req.body.completed ,
      description : req.body.description 
    }

    Todos.push(newTODO)
    res.send(Todos)
}

app.post(`/todos` , postTODOS)

// 4> PUT /todos/:id

updateTODOS = (req , res) =>
{
    foundIndex = Todos.findIndex(arr => arr.id == req.body.id)

    if (foundIndex == -1) {
      res.status(404).send("Cannot find todo with this ID")
    } else {
      Todos[foundIndex].title = req.body.title
      Todos[foundIndex].completed = req.body.completed
      Todos[foundIndex].description = req.body.description
    }
    res.send(Todos)
  }

app.put(`/todos/:id` , updateTODOS)

// 5> DELETE /todos/:id

deleteTODOS = (req ,res) =>
{
    let foundID = Todos.findIndex(arr => arr.id == req.body.id)

    if (foundID == -1) {
      res.status(404).send(`Cannot find Todo you are searching for`)
    } else {
      Todo.splice(foundID , 1)
      res.status(201).send(Todo)
    }
}

app.delete(`/todos/:id` , deleteTODOS)

// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();
});