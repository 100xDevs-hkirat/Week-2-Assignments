/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const {v4:uuidv4} = require('uuid');

const validation = require('./todovalidation');
const todo = require('./todovalidation');

const port = 3000;
const app = express();

app.use(bodyParser.json());

let todos =[];

app.post('/todos',(req, res)=>{
  let todo = req.body;
  const {
    error
  } = validation.validate(req.body);
  if (error) {
    res.status(422)
      .send(error.details[0].message);
  } else {
  
    todo.id = uuidv4();
    todos.push(todo);
    res.status(201).json({id :todo.id});
  }
});

app.get('/todos',(req, res)=>{
  
  if(todos.length ===0){
    res.send('no todos, pls add some todos');
  }
  res.status(200).json(todos);

});

app.get('/todos/:id',(req, res)=>{

  let id = req.params.id;
  let todoFound = null;
  if(id.length === 0){
    res.status(400).send('Bad Request');
  }
  for(let i=0; i<todos.length; i++){
    if(todos[i].id=== id){
      todoFound = todos[i];
      break;
    }
  }
  if(todoFound) res.status(200).json(todoFound);
  else res.status(404).send('Not found');

});

app.put('/todos/:id', (req, res)=>{

  let id= req.params.id;
  let todoFound = null;
  let updatedTodo = req.body;
  if(id.length ===0){
    res.status(400).send("Bad request");
  }
  for(let i=0; i<todos.length; i++){
    if(todos[i].id === id){
      todoFound = todos[i];
      break;
    }
  }
  if(todoFound){
    const keys = Object.keys(updatedTodo);

    for(let key of keys){
      todoFound[key] = updatedTodo[key];
    }
    res.status(200).send('todo item was found and updated');
  }
  res.status(404).send("Not Found");
});

app.delete('/todos/:id',(req,res)=>{
  let id = req.params.id;
  let todoFound = null;
  if(id.length ===0){
    res.status(400).send("Bad request");
  }
  for(let i=0; i<todos.length; i++){
    if(todos[i].id === id){
      todoFound = todos[i];
      break;
    }
  }
  if(todoFound){
    todos = todos.filter( (todo) => todo.id !== id)
    let todo = todos.find((todo)=> todo.id === id);
    if(todo === undefined){
      res.status(200).send('item was found and deleted');
    }
    else{
      res.status(500).send("Internal server error");
    }
  }
  res.status(404).send('Not Found');

});

function start(){
  console.log(`started on the port: ${port}`);
}
//app.listen(port,start);
module.exports = app;
