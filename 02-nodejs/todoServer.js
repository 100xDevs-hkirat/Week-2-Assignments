/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const app = express();
const PORT = 3000;

function genrateId(callback) {
  fs.readFile("todoDataBase.json", "utf-8", (err, data) => {
    if (err) {
      console.error("Error reading JSON file:", err);
      callback(err, null);
    }
    const jsonData = JSON.parse(data);
    let objIndex = jsonData.length-1;
    let newId = jsonData[objIndex].id+1;
    callback(null, newId);
  });
}

function updateFile(newObj,callback) {
  fs.readFile("todoDataBase.json", "utf-8", (err, data) => {
    if (err) {
      console.error("Error reading JSON file:", err);
      callback(err,null);
      return;
    }

    let jsonData = JSON.parse(data);
    jsonData.push(newObj);

    const jsonString = JSON.stringify(jsonData, null, 2);

    fs.writeFile("todoDataBase.json", jsonString, "utf-8", (err) => {
      if (err) {
        console.error("Error writing JSON file:", err);
        callback(err,null);
        return;
      }
      callback(null,"File Updated");
    });
  });
}


app.use(bodyParser.json());

app.post("/todos",(req,res)=>{
  const {title,completed,description} = req.body

    genrateId((err, ids) => {
    if (err) {
      console.error('Error:', err);
      return;
    }
    const newTodo = {
      id:ids,
      title,
      completed,
      description
    };
    updateFile(newTodo,(err,reply)=>{
      console.log(reply)
    });
  });
  
  res.sendStatus(201).json({id});
  return;
});

app.get('/todos',(req,res)=>{
  fs.readFile("todoDataBase.json", "utf-8", (err, data) => {
    if (err) {
      console.error("Error reading JSON file:", err);
      callback(err, null);
    }
    const jsonData = JSON.parse(data);
    res.json(jsonData);
  })
})

app.get("/todos/:id", (req, res) => {
  var requestedId=req.params.id;
  fs.readFile("todoDataBase.json", "utf-8", (err, data) => {
    if (err) {
      console.error("Error reading JSON file:", err);
      callback(err, null);
    }
    const jsonData = JSON.parse(data);
    const foundObject = jsonData.find((obj) => obj.id == requestedId);
    console.log(foundObject, requestedId, jsonData);
     if (foundObject) {
       res.json(foundObject); // Return the found object as JSON response
     } else {
       res.status(404).json({ error: "Todo not found" });
     }
  });
});

app.put("/todos/:id", (req, res) => {
  const requestedId = req.params.id;
  const { title, completed } = req.body;

  fs.readFile("todoDataBase.json", "utf-8", (err, data) => {
    if (err) {
      console.error("Error reading JSON file:", err);
      res.sendStatus(500).send("Internal Server Error");
      return;
    }

    let jsonData = JSON.parse(data);
    let foundObject = false;

    for (let i = 0; i < jsonData.length; i++) {
      if (jsonData[i].id == requestedId) { 
        jsonData[i].title = title;
        jsonData[i].completed = completed;
        foundObject = true;
        break;
      }
    }

    if (foundObject) {
      fs.writeFile("todoDataBase.json",JSON.stringify(jsonData),"utf-8",(err) => {
          if (err) {
            console.error("Error writing JSON file:", err);
            res.sendStatus(500).send("Internal Server Error");
            return;
          }
          res.send("Task Updated");
        }
      );
    } else {
      res.status(404).send("Object not found");
    }
  });
});


app.delete("/todos/:id",(req,res)=>{
   const requestedId = req.params.id;
   fs.readFile("todoDataBase.json", "utf-8", (err, data) => {
     if (err) {
       console.error("Error reading JSON file:", err);
       res.sendStatus(500).send("Internal Server Error");
       return;
     }

     let jsonData = JSON.parse(data);
     let deleteObject = false;

     for (let i = 0; i < jsonData.length; i++) {
       if (jsonData[i].id == requestedId) {
         jsonData.splice(i, 1);
         deleteObject = true;
         break;
       }
     }

     if (deleteObject) {
       fs.writeFile("todoDataBase.json",JSON.stringify(jsonData),"utf-8",(err) => {
           if (err) {
             console.error("Error writing JSON file:", err);
             res.sendStatus(500).send("Internal Server Error");
             return;
           }
           res.send("Task deleted");
         }
       );
     } else {
       res.status(404).send("Object not found");
     }
   });
});

module.exports = app;

  app.listen(PORT, () => {
      console.log(`Example app listening on port ${PORT}`);
    }); 