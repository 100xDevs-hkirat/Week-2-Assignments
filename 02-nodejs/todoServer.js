/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());
// const todos = [];

/*
Task o1: get all todos
*/
app.get("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    // const todos = JSON.parse(data) || [];
    let todos;
    try {
      todos = JSON.parse(data);
    } catch (error) {
      todos = [];
    }
    res.json(todos);
  });
});

/*
Task 02: get specified todo
*/
app.get("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    // const todos = JSON.parse(data) || [];
    let todos;
    try {
      todos = JSON.parse(data);
    } catch (error) {
      todos = [];
    }
    const retrievedId = Number(req.params.id);
    let requestedTodo = null;
    for (let i = 0; i < todos.length; i++) {
      if (todos[i].id === retrievedId) {
        requestedTodo = todos[i];
        break;
      }
    }
    if (requestedTodo) {
      res.json(requestedTodo);
    } else {
      res.sendStatus(404);
    }
  });
});

/*
Task 03: add todo
*/
app.post("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    // const todos = JSON.parse(data) || [];
    let todos;
    try {
      todos = JSON.parse(data);
    } catch (error) {
      todos = [];
    }
    const newTodo = req.body;
    const newTodoId = todos.length + 1;
    newTodo["id"] = newTodoId;
    todos.push(newTodo);
    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err) throw err;
      res.status(201).json(newTodo);
    });
  });
});

/*
Task 04: update todo
*/
app.put("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    // const todos = JSON.parse(data) || [];
    let todos;
    try {
      todos = JSON.parse(data);
    } catch (error) {
      todos = [];
    }
    const updateTodoId = Number(req.params.id);
    const updateTodoData = req.body;
    let todoFound = false;
    for (let i = 0; i < todos.length; i++) {
      if (updateTodoId === todos[i].id) {
        todoFound = true;
        break;
      }
    }
    if (todoFound) {
      updateTodoData["id"] = updateTodoId;
      const index = updateTodoId - 1;
      todos[index] = updateTodoData;
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err;
        res.status(200).json(todos[index]);
      });
    } else {
      res.sendStatus(404);
    }
  });
});

/*
Task 05: delete todo
*/
app.delete("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    // const todos = JSON.parse(data) || [];
    let todos;
    try {
      todos = JSON.parse(data);
    } catch (error) {
      todos = [];
    }
    const deleteTodoId = Number(req.params.id);
    if (todos.length >= deleteTodoId) {
      const deleteIndex = deleteTodoId - 1;
      todos.splice(deleteIndex, 1);
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err;
        res.sendStatus(200);
      });
    } else {
      res.sendStatus(404);
    }
  });
});

/*
Task 06: other routes
*/
app.all("*", (req, res) => {
  res.sendStatus(404);
});

/**/
// app.listen(80, () => {
//   console.log("server at 80");
// });

module.exports = app;
