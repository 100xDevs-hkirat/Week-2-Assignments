/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
    fs.readFile('./files/todo.txt', 'utf-8', (err, data) => {
        if (err) {
            return res.status(500).send("Fetching Todos Failed");
        }

        res.status(200).json({
            todos: data !== "" ? JSON.parse(data) : []
        });
    })
});

app.get("/todos/:id", (req, res) => {

    const { id } = req.params;

    fs.readFile('./files/todo.txt', 'utf-8', (err, data) => {
        if (err) {
            res.status(500).send("Fetching Todos Failed");
        }
        else {

            const existingData = data !== "" ? [...JSON.parse(data)] : [];

            const filteredData = existingData.filter(item => item.id === parseInt(id));

            if (filteredData.length > 0) {
                res.status(200).json({
                    todos: filteredData?.[0]
                });
            }
            else {
                res.status(404).send("Not Found!");
            }
        }
    })
});

app.post('/todos', (req, res) => {
    fs.readFile('./files/todo.txt', 'utf-8', (err, data) => {
        if (err) {
            res.status(500).send("Fetching Todos Failed");
        }
        else {

            const updatedData = data !== "" ? [...JSON.parse(data)] : [];

            updatedData.push({
                id: updatedData.length,
                ...req.body
            });

            fs.writeFile('./files/todo.txt', JSON.stringify(updatedData), err => {
                if (err) {
                    res.status(500).send("Adding Todo Failed!");
                }
                else {
                    res.status(201).send({
                        id: updatedData.length - 1
                    });
                }
            })
        }
    })
});

app.put("/todos/:id", (req, res) => {

    const { id } = req.params;

    fs.readFile('./files/todo.txt', 'utf-8', (err, data) => {
        if (err) {
            res.status(500).send("Fetching Todos Failed");
        }
        else {

            const existingData = data !== "" ? [...JSON.parse(data)] : [];

            let itemFound = false;

            const updatedData = [];

            for (let i of existingData) {
                if (i.id === parseInt(id)) {
                    itemFound = true;

                    updatedData.push({
                        id: i.id,
                        ...req.body
                    });
                }
                else {
                    updatedData.push(i);
                }
            }

            if (itemFound) {
                fs.writeFile('./files/todo.txt', JSON.stringify(updatedData), err => {
                    if (err) {
                        res.status(500).send("Adding Todo Failed!");
                    }
                    else {
                        res.status(200).send("Todo Item Updated Succesfully")
                    }
                })
            }
            else {
                res.status(404).send("Item Not Found");
            }
        }
    })
});

app.delete("/todos/:id", (req, res) => {
    const { id } = req.params;

    fs.readFile('./files/todo.txt', 'utf-8', (err, data) => {
        if (err) {
            res.status(500).send("Fetching Todos Failed");
        }
        else {

            const existingData = data !== "" ? [...JSON.parse(data)] : [];

            let itemFound = false;

            const updatedData = [];

            for (const i of existingData) {
                if (i.id !== parseInt(id)) {
                    updatedData.push(i);
                }
                else {
                    itemFound = true;
                }
            }

            if (itemFound) {

                fs.writeFile('./files/todo.txt', JSON.stringify(updatedData), err => {
                    if (err) {
                        res.status(500).send("Deleting Todo Failed!");
                    }
                    else {
                        res.status(200).send("Todo Item deleted Succesfully");
                    }
                })

            }
            else {
                res.status(404).send("Item Not Found");
            }
        }
    })
});

app.all("*", (req, res) => {
    res.status(404).send("Route Not Found!");
});

app.listen(3000);

module.exports = app;
