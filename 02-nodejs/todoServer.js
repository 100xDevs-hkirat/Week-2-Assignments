/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a Title and a Description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below.

  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// Server Boilerplate
const express = require('express');
const app = express();

const bodyParser = require('body-parser');
app.use(bodyParser.json());

// const port = 3001;
// app.listen(port, console.log("Listening"))

// Global
let todoLists = [];

let idGenerator = 1;

// GET all
function getTodos(req, res){
  res.json(todoLists)
}
app.get('/todos', getTodos)

// GET by id
function getTodoByID(req, res){
  const searchId = Number(req.params.id);
  const foundTodo = todoLists.find(todo => todo.id === searchId)
  if (foundTodo) {
    res.json(foundTodo)
  } else {
    res.status(404).send()
  }
}
app.get('/todos/:id', getTodoByID)

// POST 
function addTodo(req, res){
  const newTodo = req.body;
  newTodo.id = idGenerator++;
  todoLists.push(newTodo)
  res.status(201).json(newTodo);

}

app.post('/todos', addTodo)

// PUT by id

function updateTodo(req, res){
  const searchId = Number(req.params.id);
  const foundIndex = todoLists.findIndex(todo => todo.id === searchId)
  if (foundIndex !== -1) {
    const updateData = req.body;
    for(let property in updateData){
      todoLists[foundIndex][property] = updateData[property]
    }
    res.send("Updated")
  } else {
    res.status(404).send()
  }
}

app.put('/todos/:id', updateTodo)

// DELETE by id
function deleteTodo(req, res){
  const searchId = Number(req.params.id);
  const foundIndex = todoLists.findIndex(todo => todo.id === searchId)
  if (foundIndex !== -1) {
    todoLists.splice(foundIndex, 1)
    res.send("Deleted")
  } else {
    res.status(404).send("Doesn't Exit")
  }
}
app.delete('/todos/:id', deleteTodo)

// Any other route
app.use((req, res) => {
  res.status(404).send('Wrong Route');
});


module.exports = app;

// let todoLists = [
//   {
//     id: 1,
//     title: 'Complete assignment',
//     description: 'Finish the project assignment by Friday',
//     completed: false
//   },
//   {
//     id: 2,
//     title: 'Buy groceries',
//     description: 'Get milk, eggs, and bread from the store',
//     completed: true
//   },
//   {
//     id: 3,
//     title: 'Go for a run',
//     description: 'Run for 30 minutes in the park',
//     completed: false
//   }
// ];