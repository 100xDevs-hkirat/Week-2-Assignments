/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const PORT = 3000;
const app = express();

app.use(bodyParser.json());

var todoItems = [];


app.get("/todos", (req, res) => {
  res.status(200).send(todoItems);
})

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  const index = todoItems.findIndex(todoItem => todoItem.id === id.toString());
  console.log(id, index);


  if(index === -1) {
    res.status(404).send("TODO NOT FOUND !!");
  }
  else {
    res.status(200).send(todoItems[index]);
  }
})

app.post("/todos", (req, res) => {
  var todo = req.body;

  const uniqueId = Date.now().toString();
  todo["id"] = uniqueId;

  res.status(201).send({
    "id" : uniqueId
  })

  todoItems.push(todo);
})

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;

  const index = todoItems.findIndex(todoItem => todoItem.id === id);

  if(index === -1) {
    res.status(404).send("TODO NOT FOUND")
  }
  else {
    // var updatedTodo = Object.assign({}, todoItems[index], req.body);
    // todoItems[index] = updatedTodo;

    Object.assign(todoItems[index], req.body);
    res.status(200).send("TODO UPDATED")
  }
})

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  const index = todoItems.findIndex(todoItem => todoItem.id === id);

  if(index === -1) {
    res.status(404).send("TODO NOT FOUND TO DELETE !!");
  }
  else {
    todoItems.splice(index, 1);
    res.status(200).send("TODO ITEM DELETED !!");
  }
})

app.get("/", (req, res) => {
  res.send("Intial Route For TODO APP");
})

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}`)
})

module.exports = app;
