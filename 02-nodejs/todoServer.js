/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path=require('path');
const port=3000;
const app = express();

app.use(bodyParser.json());

var todoList=[];


  // {
  //   id : 1,
  //   title:'Learn React',
  //   description:'React is very cool framework for frontend development'
    
  // },
  // {
  //   id : 2,
  //   title:'Learn javascript',
  //   description:'JavaScript is very important language for frontend as well as backend development'
    
  // }


function printAlltodos(req,res){
  fs.readFile("./files/todoList.json","utf8",(err,data)=>{
    if(err){
    throw err;
    }
res.json(JSON.parse(data));
  });
}

function printIDtodo(req,res){
  const todoId=parseInt(req.params.id);
  fs.readFile("./files/todoList.json","utf8",(err,data)=>{
    if(err)throw err;
    const todos=JSON.parse(data);
    const todoIndex=todos.findIndex((todo)=>todo.id===todoId);
    if(todoIndex===-1){
     res.status(404).send('error: Todo not found');
    }
   res.status(200).json(todos[todoIndex]);
  });

  
}

function createTodo(req,res){
 fs.readFile("./files/todoList.json","utf8",(err,data)=>{
  if(err)throw err;
  const todos=JSON.parse(data);
  var newTodoId=todos.length+1;
  const newTodo={
    id:newTodoId,
    title: req.body.title,
    description : req.body.description
  };
  todos.push(newTodo);
  fs.writeFile("./files/todoList.json",JSON.stringify(todos),"utf8",(err)=>{
    if(err)throw err;
  res.status(201).json(newTodo);

  });
 });
  
}

function updateIDtodo(req,res){
  const todoId=parseInt(req.params.id);
  fs.readFile("./files/todoList.json","utf8",(err,data)=>{
    if(err)throw err;
    const todos=JSON.parse(data);
    var todoIndex=todos.findIndex((todo)=>todo.id===todoId);
    if(todoIndex===-1){
      res.status(404).send('error: Todo not found');
      }
      todos[todoIndex].title=req.body.title;
      todos[todoIndex].description=req.body.description;
    fs.writeFile("./files/todoList.json",JSON.stringify(todos),"utf8",(err)=>{
      if(err)throw err;
      res.status(200).json(todoList[todoIndex]);
    });
  });
}

function deleteTodo(req,res){
  let todoId=parseInt(req.params.id);
  fs.readFile("./files/todoList.json","utf8",(err,data)=>{
    if(err)throw err;
    const todos=JSON.parse(data);
    const index=todos.findIndex((todo)=>todoId===todo.id);
    if(index===-1){
    res.status(404).send('error: Todo not found');
    }
    todos.splice(index, 1);
    for(let i=0;i<todos.length;i++){
      todos[i].id=i+1;
    }
    fs.writeFile("./files/todoList.json",JSON.stringify(todos),"utf8",(err)=>{
      if(err)throw err;
  res.status(200).send();

    });
  });
}

app.get('/todos',printAlltodos)
app.get('/todos/:id',printIDtodo)
app.post('/todos',createTodo)
app.put('/todos/:id',updateIDtodo)
app.delete('/todos/:id',deleteTodo)

app.get('/',(req,res)=>{
  res.sendFile(path.join(__dirname,"./solutions/index.html"));
});

app.use((req, res) => {
  res.status(404).json({ error: 'route not defined in the server' });
});

app.listen(port,(req,res)=>{
  console.log(`app is listening on ${port}`);
})

module.exports = app;
