/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  [Done]1.GET /todos - Retrieve all todo items
    description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  [Done]2.GET /todos/:id - Retrieve a specific todo item by ID
    description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  [Done]3. POST /todos - Create a new todo item
    description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  [Done]4. PUT /todos/:id - Update an existing todo item by ID
    description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

port  = 3000;

const app = express();

app.use(bodyParser.json());



todos = [ {"id":1,
"title" : "Todo-1",
"completed" : false,
  "description": "description-1"
} , {
  "id":2,
"title" : "Todo-2",
"completed" : false,
"description": "description-2"
},
{"id":3,
"title ": "Todo-2",
"completed" : false,
"description": "description-2"
},
{"id":4,
"title" : "Todo-3",
"completed" : false,
"description": "description-3"
} ] 

todos = []

app.get('/todos', (req, res) => {
  res.status(200).json(todos);
})

app.get('/todos/:id', (req, res) => {
  const id = req.params.id;
  const todo = todos.find(todo => todo.id == id);


  if(todo){
    res.status(200).json(todo);
  }
  else{
    res.status(404).json({message: `Todo with id ${id} not found`});
  }

})

app.post('/todos', (req, res) => {

  var todo = req.body;
  id_no = todos.length + 1;
  todo = {"id" :id_no , "title" : todo.title ,"completed": todo.completed,"description" :todo.description  };

  todos.push(todo);

  res.status(201).json({"id":id_no});
  
  })

app.put('/todos/:id',(req,res) => {

  const id  = req.params.id;
  const boddy  = req.body ; 

  var ok=0;
  

  todos = todos.map((todo)=> {

    if(todo.id ==id) 
    {
      todo.title = boddy.title;
    todo.completed = boddy.completed;
    ok=1;
    }
    
    return todo;
  
  })

  console.log(todos)
  if(ok==1)
  res.status(200).json({"message": " Updated"});
  else
  res.status(404).json({"message": " Didnt update"});

})

app.delete('/todos/:id',(req,res) => {


  var id = req.params.id;

  if(id > todos.length)
  res.status(404).json({"message": " Not found"});
  else
  todos = todos.splice(id-1,1);
  res.status(200).json({"message": " Deleted"});
})



  // app.listen(port, () => {
  //   console.log(`Example app listening on port ${port}`)
  // })



module.exports = app;

