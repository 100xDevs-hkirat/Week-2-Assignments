/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

var todos = [];


app.get("/todos", (req, res) => {
  try {
    console.log("successful");
    res.json(todos);
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.get("/todos/:id", (req, res) => {
  try {
    const id = req.params.id;
    let found = false;

    todos.forEach((todo) => {
      if (todo.id == id) {
        found = true;
        res.json(todo);
      }
    });

    if (!found) {
      res.status(404).json({ error: "Todo not found" });
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


app.post("/todo", (req, res) => {
  try {
    const { id, todo, completed, description } = req.body;

    if (!id || !todo || !completed || !description) {
      res.status(400).json({ error: "Incomplete todo data" });
      return;
    }

    todos.push(req.body);
    res.status(201).json({ message: "Todo created successfully" });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


app.put("/todo/:id", (req, res) => {
  try {
    const { id, title, completed, description } = req.body;
    const todoId = req.params.id;
    let todoUpdated = false;

    todos.forEach((todo) => {
      if (todo.id == todoId) {
        todo.todo = req.body.todo;
        todo.completed = req.body.completed;
        todo.description =req.body.description;
        todoUpdated = true;
        res.status(200).json({ message: "Todo updated successfully" });
      }
    });

    if (!todoUpdated) {
      res.status(404).json({ message: "Todo ID not found" });
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


app.delete("/todo/:id", (req, res) => {
  try {
    const id = req.params.id;
    let todoFound = false;

    todos.forEach((todo, index) => {
      if (todo.id == id) {
        todos.splice(index, 1);
        todoFound = true;
        res.status(200).json({ message: "Deleted todo successfully" });
      }
    });

    if (!todoFound) {
      res.status(404).json({ message: "Todo ID not found" });
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


app.listen(3000,()=>{
  console.log("Server listening at 3000 port");
})
module.exports = app;
