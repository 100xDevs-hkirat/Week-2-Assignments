/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const fs = require('fs')
const express = require('express');
const bodyParser = require('body-parser');
const { log } = require('console');
app = express()
var port = 3000;
app.listen(port,()=>{
  console.log(`Listening on port - ${port}`);
})



var filePath = '/Users/namanagrawal/Desktop/Codes/100x/Assignments/Week_2/Week-2-Assignments/02-nodejs/ToDoList.txt'

let toDos = [];
app.use(bodyParser.json());

//Middleware to get the data from the file.

app.use((req,res,next)=>{ 
  fs.readFile(filePath,'utf8',(err,data)=>{
    if(err){
      console.log("Error in reading File");
    }
    toDos = JSON.parse(data);
  })
  next();
})

function IdFinder(id) {
  for(var i=0;i<toDos.length;i++){
    if(toDos[i].id === id){
      return i;
    }
  }
  return -1;
}

function requestPost(req,res){
  res.status(200).send(toDos);
}
function requestIdElement(req,res){
  console.log(req.params.id);
  const index = IdFinder(parseInt(req.params.id));
  console.log("Index at - "+index);
  if(index==-1){
      res.status(404).send(req.params.id + " - ID not found!")
  }
  else{
    res.status(200).send(toDos[index])
  }
}
function addingElement(req,res) {
  toDos.push(req.body)
  fs.writeFile(filePath,JSON.stringify(toDos),(err,data)=>{
    if(err){
      res.status(404);
      console.log("Error in writing the file back!!")
    }
  })
  res.status(201);
  console.log(toDos);
}
function modifyingElement(req,res){
  var index = IdFinder(parseInt(req.params.id));
  
  if(index==-1){
    res.status(404);
    console.log("ID Doesn't Exits!");
  }
  else{
    toDos[index].title = req.body.title;
    toDos[index].completed = req.body.completed;
    toDos[index].description = req.body.description;
    console.log(toDos);
    fs.writeFile(filePath,JSON.stringify(toDos),(err,data)=>{
      if(err){
        res.status(404);
        console.log("Error in writing the file back!!")
      }
    })

  }
}


function deleteElement(req,res){
  var index = IdFinder(parseInt(req.params.id));
  console.log(index);
  if(index==-1){
    res.status(404);
    console.log("ID Doesn't Exits!");
  }
  else{
    res.status(200);
    toDos.splice(index,1);
    console.log(toDos);
    fs.writeFile(filePath,JSON.stringify(toDos),(err,data)=>{
      if(err){
        res.status(404);
        console.log("Error in writing the file back!!")
      }
    })
  }
}
app.get('/todos',requestPost);
app.get('/todos/:id',requestIdElement);
app.post('/todos',addingElement);
app.put('/todos/:id',modifyingElement);
app.delete('/todos/:id',deleteElement);






//module.exports = app;
