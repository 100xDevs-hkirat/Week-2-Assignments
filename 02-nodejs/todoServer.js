/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const cors = require('cors');

const app = express();
var todos;
var todosMap = new Map();

app.use(bodyParser.json());
app.use(cors());

function middleware(req,res,next){
  fs.readFile("solutions/todos.json", "utf8", (err, data) => {
    if (err) throw err;
    todos = JSON.parse(data);
    todosMap.clear();
    todos.forEach(element => {
      todosMap.set(element.id,element);
    });
    const todoId = Number(req.params.id);
    if(todosMap.has(todoId)){
      next();
    }else{
      res.status(404).send('Todo Not Found');
    }
  });
}

function getTodos(req,res){
  fs.readFile("solutions/todos.json", "utf8", (err, data) => {
    if (err) throw err;
    res.json(JSON.parse(data));
  });
}

function getTodosById(req,res){
  const todoId = Number(req.params.id);
  const requestedTodo = todosMap.get(todoId);
  res.status(200).json(requestedTodo);
}

function createTodos(req,res){
  let todoId = 100;
  do{
    todoId = 100 + Math.floor((Math.random() * 10) + 1)
  }while(todosMap.has(todoId));

  let newTodo = {
    id: todoId,
    title: req.body.title,
    description: req.body.description
  }
  fs.readFile("solutions/todos.json", "utf8", (err, data) => {
    if (err) throw err;
    todos = JSON.parse(data);
    todos.push(newTodo);
    fs.writeFile("solutions/todos.json", JSON.stringify(todos), (err) => {
      if (err) throw err;
      res.status(201).json(newTodo);
    });
  });
}

function updateTodos(req,res){
  const todoId = Number(req.params.id);
  const requestedTodo = todosMap.get(todoId);
  requestedTodo.title = req.body.title;
  fs.writeFile("solutions/todos.json", JSON.stringify(todos), (err) => {
    if (err) throw err;
    res.status(200).json('Todo Updated');
  });
}

function deleteTodo(req,res){
  const todoId = Number(req.params.id);
  todos = todos.filter((item) => item.id !== todoId);
  todosMap.delete(todoId);
  fs.writeFile("solutions/todos.json", JSON.stringify(todos), (err) => {
    if (err) throw err;
    res.status(200).json('Todo Deleted');
  });
}

app.get('/todos', getTodos);
app.get('/todos/:id',middleware,getTodosById);
app.post('/todos',createTodos);
app.put('/todos/:id',middleware,updateTodos);
app.delete('/todos/:id',middleware,deleteTodo);

// app.use('/',(req,res)=>{
//   req.sendFile('index.html');
// })
app.listen(3000,()=>{console.log(`listening to port 3000`)});

module.exports = app;
