/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());
app.listen(3000, () => {
  console.log(`Running on 3000`);
  console.log(`http://127.0.0.1:3000`);
});
data = [];
// data = [
//   {
//     Title: "Work",
//     Description: "TO DO WORK",
//     Completed: false,
//   },
//   {
//     Title: "Work1",
//     Description: "TO DO WORK1",
//     Completed: false,
//   },
//   {
//     Title: "Work3",
//     Description: "TO DO WORK3",
//     Completed: false,
//   },
// ];

app.get("/todos", (req, res) => {
  // res.send("Getting all Todos");
  console.log(data);
  res.status(200).json(data);
});

app.post("/todos", (req, res) => {
  let input = req.body;
  if (!(input.id == undefined)) {
    res.status(302).send("Already Found!!!");
  } else {
    id = data.length + 1;
    input.id = id;
    data.push(input);
    if (data.length == id) {
      res.send("Record Added Successfully").status(201);
    } else {
      res.send("Something is wrong").status(202);
    }
  }
});

module.exports = app;
