/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

app.listen('3000',()=>{
  console.log('app is running on port 3000');

});

app.set('uniquId',0);
app.set('todoCollection',[]);

app.get('/todos',(req,res)=>{
      res.status(200).send(this.todoCollection);
});

app.get('/todos/:id',(req,res)=>{
  const id = req.params.id;
  const isPresent = this.todoCollection ? this.todoCollection.some((x)=>x.id===id) : false;
  if(isPresent){
    res.status(200).send(this.todoCollection.filter(x=>x.id===id)[0]);
  }
  else{
    res.sendStatus(404);
  }
})

app.post('/todos',(req,res)=>{
      const id = getNextId();
      const todoItem = { "id":id,"title": req.body.title, "completed": req.body.completed, "description": req.body.description };
      app.get('todoCollection').push(todoItem);
      res.status(201).send({"id":id});
})

app.put('/todos/:id',(req,res)=>{
  const id = req.params.id;
  let todoItem = app.get('todoCollection') ? app.get('todoCollection').filter((x)=>x.id===id) : false;
  console.log(todoItem);
  if(todoItem){
    const index = app.get('todoCollection').findIndex(x=>x.id===id);
    app.get('todoCollection')[index] = req.body;
    app.set('todoCollection',app.get('todoCollection'));
    res.sendStatus(200);
  }
  else{
    res.sendStatus(404);
  }
})

app.delete('/todos/:id',(req,res)=>{
  const id = req.params.id;
  let todoItem = this.todoCollection ? this.todoCollection.filter((x)=>x.id===id) : false;
  if(todoItem){
    const index = this.todoCollection.findIndex(x=>x.id===id);
    this.todoCollection.splice(index,1);
    this.app.set('todoCollection',this.todoCollection);
    res.sendStatus(200);
  }
  else{
    res.sendStatus(404);
  }
})

function getNextId(){
    const nextId = app.get('uniquId') + 1;
    app.set('uniquId',nextId);
    return nextId;
}

module.exports = app;
