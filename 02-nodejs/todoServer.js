/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const fs = require("fs");
const cors = require("cors");
const PORT = 5000;

app.use(cors());

app.use(bodyParser.json());
const toDos = [
  { id: 11, title: "football", description: "have to play football" },
  { id: 12, title: "cooking", description: "have to prepare food" },
  { id: 13, title: "trekking", description: "have to go for trek" },
  { id: 14, title: "coding", description: "have to completed assignment" },
];

//get all to do
app.get("/alltodo", (req, resp) => {
  const content = JSON.stringify(toDos);
  fs.writeFile(
    "/Users/akash/Desktop/MERN/Week-2-Assignments/02-nodejs/files/a.txt",
    content,
    (err) => {
      if (err) {
        resp
          .status(404)
          .send("Some erroroccured while writing content to file :" + err);
      } else {
        resp.status(200).send("to do's added to file successfully");
      }
    }
  );
});
app.get("/all", (req, resp) => {
  resp.send(toDos);
});
// get to do based on id
app.get(`/todo/:id`, (req, resp) => {
  const index = toDos.findIndex((item) => item.id == req.params.id);
  console.log(index);
  if (index != -1) {
    resp.send(JSON.stringify(toDos[index]));
  } else {
    resp.status(404).send("This to do id does not  exist");
  }
});

//create a new to do item add it todos array.
app.post("/addtodo", (req, resp) => {
  const todo = {
    id: req.body.id,
    title: req.body.title,
    description: req.body.description,
  };
  console.log(JSON.stringify(todo));
  toDos.push(todo);
  fs.appendFile(
    "/Users/akash/Desktop/MERN/Week-2-Assignments/02-nodejs/files/a.txt",
    JSON.stringify(todo),
    (err) => {
      if (err) {
        resp
          .status(404)
          .send("Some erroroccured while writing content to file :" + err);
      } else {
        resp.status(201).send("to do added to file successfully");
      }
    }
  );
});
//update an existing to do
app.put("/updatetodo", (req, resp) => {
  const obj = {
    id: req.body.id,
    title: req.body.title,
    description: req.body.description,
  };
  const index = toDos.findIndex((item) => item.id == obj.id);
  if (index != -1) {
    toDos[index] = obj;
    resp.status(200).send("To do is updated");
  } else {
    resp.status(404).send("To do not found");
  }
});

//delete to do based on id
app.delete("/delete/:id", (req, resp) => {
  const index = toDos.findIndex((item) => item.id == req.params.id);
  if (index != -1) {
    toDos.splice(index, 1);
    resp.send("to do is deleted");
  } else {
    resp.status(404).send("this to do does not exist");
  }
});
app.listen(PORT, () => {
  console.log(`Server started at PORT ${PORT} `);
});

module.exports = app;
