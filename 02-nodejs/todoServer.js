/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const PORT = 3001;

const app = express();

app.use(bodyParser.json());

//WHOLE LIST AND ID FOR GENERATING
let todoList = [];
let userId = 10000;

// GIVE ALL LIST IN RESPONSE
app.get("/todos", (req, res) => {
  res.status(200).json(todoList);
});

//FIND INDIVIDUAL TODO ITEM WITH ID AND GIVE RESPONSE WITH THAT TODO ITEM
app.get("/todos/:id", (req, res) => {
  const Id = req.params.id;
  console.log(Id);

  const todo = todoList.find((to) => to.id === parseInt(Id));
  const todo1 = todoList.find((t) => t.id === parseInt(req.params.id));
  console.log(todo);
  console.log(todo1);

  if (todo) {
    res.json(todo);
  } else {
    res.status(404).send("TODO not found");
  }
});

//ADDING TODO ITEM
app.post("/todos", (req, res) => {
  const { title, description } = req.body;

  // WE CAN ALSO GENERATE UNIQUE ID LIKE THIS
  // const id = Date.now().toString();
  const newtodo = {
    id: userId++,
    title,
    description,
  };
  todoList.push(newtodo);

  console.log(newtodo);
  console.log(todoList);

  res.status(201).json(newtodo);
});

app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id); // Convert id to a number
  const index = todoList.findIndex((to) => to.id === id);

  if (index === -1) {
    res.status(404).send("TODO not found");
  } else {
    todoList[index].title = req.body.title;
    todoList[index].description = req.body.description;
    res.json(todoList[index]);
    console.log(todoList);
  }
});

app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id); // Convert id to a number
  const index = todoList.findIndex((to) => to.id === id);

  if (index === -1) {
    return res.status(404).send("NOT found");
  }

  todoList.splice(index, 1);
  res.status(200).send("Todo deleted successfully");
});

app.listen(PORT);

// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();
});

module.exports = app;
