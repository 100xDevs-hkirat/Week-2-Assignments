/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */
const Todo = require('./Todo')
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
//const port = 3000;

app.use(bodyParser.json());

let todos = new Todo();

function test(req, res) {
    res.status(200).send('test success');
}

/**
 *  1.GET /todos - Retrieve all todo items
 *     Description: Returns a list of all todo items.
 *     Response: 200 OK with an array of todo items in JSON format.
 *     Example: GET http://localhost:3000/todos
 * @type {Todo}
 */

function retrieveAllToDos(req, res) {
    let allTodos = todos.getAll();
    res.status(200).json(allTodos);
}

/**
 *  2.GET /todos/:id - Retrieve a specific todo item by ID
 *     Description: Returns a specific todo item identified by its ID.
 *     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 *     Example: GET http://localhost:3000/todos/123
 * @type {Todo}
 */

function retrieveTodoById(req, res) {
    const todo = todos.get(req.params.id);
    if (!todo) {
        res.status(404).send();
    } else {
        res.json(todo);
    }
}

/**
 * 3. POST /todos - Create a new todo item
 *     Description: Creates a new todo item.
 *     Request Body: JSON object representing the todo item.
 *     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 *     Example: POST http://localhost:3000/todos
 *     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
 */
function postTodo(req, res) {
    const newTodo = {
        title: req.body.title,
        completed: req.body.completed,
        description: req.body.description
    };
    todos.add(newTodo);
    res.status(201).json(newTodo);
}

/**
 *   4. PUT /todos/:id - Update an existing todo item by ID
 *     Description: Updates an existing todo item identified by its ID.
 *     Request Body: JSON object representing the updated todo item.
 *     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 *     Example: PUT http://localhost:3000/todos/123
 *     Request Body: { "title": "Buy groceries", "completed": true }
 */
function udpateTodoById(req, res) {
    const index = todos.update(req.params.id, req.body);
    if (index === -1) {
        res.status(404).send();
    } else {
        todos.update(index, req.body);
        res.status(200).send();
    }
}

/**
 *  5. DELETE /todos/:id - Delete a todo item by ID
 *  Description: Deletes a todo item identified by its ID.
 *  Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 *  Example: DELETE http://localhost:3000/todos/123
 */
function removeTodoById(req, res) {
    const index = todos.remove(req.params.id);
    if (index === -1) {
        res.status(404).send();
    } else {
        todos.remove(index);
        res.status(200).send();
    }
}

app.get('/test', test);
app.get('/todos', retrieveAllToDos);
app.get('/todos/:id', retrieveTodoById);
app.post('/todos', postTodo);
app.put('/todos/:id', udpateTodoById);
app.delete('/todos/:id', removeTodoById);

function started() {
    console.log(`Example app listening on port ${port}`);
}

//app.listen(port, started);

// for all other routes, return 404
app.use((req, res, next) => {
    res.status(404).send();
});
module.exports = app;
