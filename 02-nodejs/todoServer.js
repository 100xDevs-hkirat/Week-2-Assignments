/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());
const todos = [];

//* Retrieve all todo items
app.get('/todos', (req,res) => {
  try {
    return res.status(200).json(todos);
  } catch (error) {
    return res.status(400).json(error);
  }
})

//* Retrieve a specific todo item by ID
app.get('/todos/:id', (req,res) => {
  try {
    const id = req.params.id;
    todos.forEach(todo => {
      if(todo.id === id){
        return res.status(201).json(todo);
      }
    })
  } catch (error) {
    return res.status(404).json(error);
  }
})

//* Create a new todo item
app.post('/todos', (req,res) => {
  try {

    const {title, description, completed} = req.body;

    function generateRandomToken() {
      let token = '';
      const characters = '0123456789ABCDEF';
      
      for (let i = 0; i < 16; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        token += characters.charAt(randomIndex);
      }
      
      return token;
    }
    const id = generateRandomToken();
    todos.push({id, title, description, completed});

    return res.status(201).json(id);
    
  } catch (error) {
    return res.status(400).json(error);
  }
})

//* Update the todo
app.put('/todos/:id', (req,res) => {
  try {
    const id = req.params.id;
    const {title, description, completed} = req.body;
    let todoWithId = todos.forEach(todo => {
      if(todo.id === id ){
        return todo
      }
    });
    if(!todoWithId){
      return res.status(404).send("Todo doesn't exists with this id");
    }
    todoWithId.title = title;
    todoWithId.description = description;
    todoWithId.completed = completed;

    return res.status(201).json(todoWithId);
  } catch (error) {
    return res.status(404).json(error);
  }
})

//* Delete todo
app.delete('/todos/:id', async(req,res) => {
  try {
    const id = req.params.id;
    let index = 0;
    let todoWithId = todos.forEach(todo => {
      index += 1;
      if(todo.id === id ){
        return todo
      }
    });
    todos.splice(index - 1, 1);

    return res.status(201).json(todos);
  } catch (error) {
    return res.status(404).json(error);
  }
})
module.exports = app;
