/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 4000;
var todoArray = [];
app.use(bodyParser.json());
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});

app.get('/todos', (req, res) => {
  if(todoArray.length==0){
    const data = {
      message: "NO TO-DO's to Display"
    };
    res.status(200).json(data);
  }
  else{
    res.status(200).json(todoArray);
  }
})

app.get('/todos/:id', (req, res) => {
  var id = req.params.id;
  if(todoArray.length>=id){
    var todo = todoArray[id-1];
    todo.id = parseInt(id)
    res.status(200).json(todo);
  }else{
    const data = {
      message: "NOT FOUND TO-DO WITH ID : "+id
    };
    res.status(404).json(data);
  }
})

app.post('/todos', (req, res) => {
  var todo = req.body;
  if(todo.title != null && todo.description != null){
    var index = todoArray.push(todo);
    const data = {
      id: index
    };
    res.status(201).json(data);
  }else{
    res.status(400).json("Bad Request - Missing Data");
  }
})

app.put('/todos/:id', (req, res) => {
  var id = req.params.id;
  var todo = req.body;
  if(todoArray.length>=id){
    var obj = todoArray[id-1];
    if(todo.title!=null){
      obj.title = todo.title;
    }if(todo.description!=null){
      obj.description = todo.description;
    }
    
    const data = obj;
    data.id = id;
    res.status(200).json(data).send();
  }else{
    const data = {
      message: "NOT FOUND TO-DO WITH ID : "+id
    };
    res.status(404).json(data);
  }
})

app.delete('/todos/:id', (req, res) => {
  var id = req.params.id;
  if(todoArray.length>=id){
    todoArray.splice(id-1, 1);
    const data = {
      message: "Deleted Successfully ID : "+id
    };
    res.status(200).json(data);
  }else{
    const data = {
      message: "NOT FOUND TO-DO WITH ID : "+id
    };
    res.status(404).json(data);
  }
})

module.exports = app;
