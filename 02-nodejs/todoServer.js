/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');
const port = 3001;

const app = express();

var todoList = [];

app.use(express.json());

function findTodoByIndex(arr, id) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].id === id) return i;
  }
  return -1;
}

function deleteTodoByIndex(arr, id) {
  let newArray = [];
  for (let i = 0; i < arr.length; i++) {
    if (i !== id) newArray.push(arr[i]);
  }
  return newArray;
}

app.get('/todos', (req, res) => {
  res.json(todoList);
  console.log("GET: Todos List returned");
})

app.get('/todos/:id', (req, res) => {
  const todoIndex = findTodoByIndex(todoList, req.params.id);
  if (todoIndex === -1) {
    res.sendStatus(404);
    console.log("GET ID: ID Not found");
  }
  else {
    console.log("GET ID: ID found and returned");
    res.json(todoList[todoIndex]);
  }
})

app.post('/todos', (req, res) => {
  const uuid = uuidv4();
  const todo = {
    id: uuid,
    title: req.body.title,
    description: req.body.description,
  };
  todoList.push(todo);
  console.log("POST: To Do Item Added.");

  res.status(201).send({id: uuid});
})

app.put('/todos/:id', (req, res) => {
  const index = findTodoByIndex(todoList, req.params.id);
  if (index !== -1) {
    if(req.body.title !== undefined){
      todoList[index].title = req.body.title;
    }
    todoList[index].title = req.body.title;
    if(req.body.description !== undefined){
      todoList[index].description = req.body.description;
    }
    console.log("PUT: To Do Item found and updated.");
    res.sendStatus(200);
  }
  else {
    res.sendStatus(404);
  }
})

app.delete('/todos/:id', (req, res) => {
  const index = findTodoByIndex(todoList, req.params.id);
  if (index !== -1) {
    todoList = deleteTodoByIndex(todoList, index);
    console.log("DELETE: To Do Item found and deleted.");
    res.sendStatus(200);
  }
  else {
    console.log("DELETE: To Do Item not found.");
    res.sendStatus(404);
  }
})

// for all other routes, return 404
app.use((req, res, next) => {
  res.sendStatus(404).send();
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
})

module.exports = app;
