/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();
const port = 3000;
// app.use(bodyParser.json());
app.use(express.json());

app.get("/", (req, res) => {
  res.send("This is Hello Page");
});

const allTodos = [
  {
    title: "Todo1",
    desc: "desc1",
    id: 1,
  },
  {
    title: "Todo2",
    desc: "desc2",
    id: 2,
  },
];

//Get all todos list
app.get("/todos", (req, res) => {
  res.json(allTodos);
});

//Get specific todo by id
app.get("/todos/:id", (req, res) => {
  const idParams = req.params.id;
  console.log(idParams);

  const todo = allTodos.find((item) => {
    console.log(item);
    return item.id === Number(idParams);
  });

  console.log(todo);
  if (todo) {
    res.json(todo);
  } else {
    res.status(404).send();
  }
});

//Create Todo
app.post("/todos", (req, res) => {
  const newTodo = {
    id: Date.now(),
    title: req.body.title,
    completed: req.body.completed,
    description: req.body.description,
  };
  allTodos.push(newTodo);

  console.log(newTodo);
  res.status(201).json(newTodo);
});

//PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", (req, res) => {
  const idParams = req.params.id;
  const todoIndex = allTodos.findIndex(
    (item) => item.id === parseInt(idParams)
  );

  if (todoIndex === -1) {
    res.status(404).send();
  } else {
    (allTodos[todoIndex].title = req.body.title),
      (allTodos[todoIndex].completed = req.body.completed),
      (allTodos[todoIndex].description = req.body.description);

    res.json(allTodos[todoIndex]);
  }
});

// DELETE /todos/:id - Delete a todo item by ID
app.delete("/todos/:id", (req, res) => {
  const idParams = req.params.id;
  const todoIndex = allTodos.findIndex(
    (item) => item.id === parseInt(idParams)
  );

  if (todoIndex === -1) {
    res.status(404).send();
  } else {
    allTodos.splice(todoIndex, 1);
    res.status(200).send();
  }
});
app.use((req, res, next) => {
  res.status(404).send("Not Any thing . please back .");
});
app.listen(port, (req, res) => {
  console.log("App is running on port 3000.");
});
module.exports = app;
