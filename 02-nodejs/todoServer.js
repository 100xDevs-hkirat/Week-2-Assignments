/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const fs = require("fs");
  const express = require("express");
  const { dirname } = require("path");
  const app = express();
  const port = 3000;
  const bodyParser = require("body-parser");
  const cors = require("cors")
  class Post {
    constructor(title, description, id) {
      (this.title = title), (this.description = description), (this.id = id);
    }
  }

  app.use(cors());
  app.use(bodyParser.json());
  
  // gets all the Ids
  app.get("/todos", (req, res) => {
    fs.readFile("a.json", "utf-8", (err, data) => {
      try {
        if (err) throw err;
        res.status(200).sendFile(__dirname + "/a.json");
      } catch (error) {
        console.error("there is an error", error.message);
      }
    });
  });
  
  // get a post identified by the id
  
  app.get("/todos/:id", (req, res) => {
    const Id = req.params.id;
    // var data = fs.readFileSync('a.json');
    // var MyObject = JSON.parse(data);
    var data = fs.readFileSync("a.json");
    var MyObject = JSON.parse(data);
    const Index = MyObject.findIndex((item) => item.id == Id);
    if (Index == -1) {
      res.status(404).send("No post found");

      // res.send("No post found")
    } else {
      console.log(Index);
      console.log(MyObject[Index]);
      res.status(200).json(MyObject[Index]);
    }
  });
  
  // adds a new post
  
  app.post("/todos", (req, res) => {
    const t = req.body.title;
    const d = req.body.description;
    console.log("the description is" + d);
    const currentDate = new Date();
    const timestamp = currentDate.getTime();
    const NewPost = new Post(t, d, timestamp);
  
    var data = fs.readFileSync("a.json");
    const MyObject = JSON.parse(data);
    MyObject.push(NewPost);
  
    fs.writeFile("a.json", JSON.stringify(MyObject), function (err) {
      try {
        if (err) throw err;
        // res.status(201).json({ id: timestamp });
        res.status(201).send("Todo is updated")
        console.log("The post is updated");
      } catch (error) {
        console.error("there is an error", error.message);
      }
    });
  });
  
  app.put("/todos/:id", (req, res) => {
    const Id = req.params.id;
    const NewTitle = req.body.title;
    const NewDescription = req.body.description;
    // console.log("Id is"+Id)
    var data = fs.readFileSync("a.json");
    var MyObject = JSON.parse(data);
    const Index = MyObject.findIndex((item) => item.id == Id);
  
    if (Index == -1) {
      res.status(404).send("No post found");
    } else {
      if (NewTitle != undefined) {
        MyObject[Index]["title"] = NewTitle;
      }
      if (NewDescription != undefined) {
        MyObject[Index]["description"] = NewDescription;
      }
  
      // console.log("index is "+Index)
      fs.writeFile("a.json", JSON.stringify(MyObject), function (err) {
        try {
          if (err) throw err;
          res.status(200).send("the post is updated");
          console.log("The post is updated");
        } catch (error) {
          console.error("there is an error", error.message);
        }
      });
    }
  });
  
  // deletes the post item identified with the Id
  app.delete("/todos/:id", (req, res) => {
    const Id = req.params.id;
    console.log("Id is" + Id);
    var data = fs.readFileSync("a.json");
    var MyObject = JSON.parse(data);
    const Index = MyObject.findIndex((item) => item.id == Id);
    if(Index==-1){
      res.status(404).send("No Post found");
    }else{
      MyObject.splice(Index, 1);
      console.log("index is " + Index);
      fs.writeFile("a.json", JSON.stringify(MyObject), function (err) {
        try {
          if (err) throw err;
          res.status(200).send("the post is deleted");
          console.log("The post is deleted");
        } catch (error) {
          console.error("there is an error", error.message);


        }
      });
    }
  });

  app.get('*', function(req, res){
    res.status(404).send('No route found');
  });

module.exports = app;