/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();
const port = 3000;

app.use(bodyParser.json());

// 1
app.get("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;

    const todos = JSON.parse(data);
    res.json(todos);
  });
});

// 2
app.get("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;

    const todos = JSON.parse(data);
    const id = parseInt(req.params.id);
    for (const todo of todos) {
      if (id === todo["id"]) {
        res.json(todo);
      }
    }
    res.status(404).send();
  });
});

// 3
app.post("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;

    const todos = JSON.parse(data);
    const todo = req.body;
    const id = Math.floor(Math.random() * 100000) + 1;
    todo["id"] = id;
    todos.push(todo);

    fs.writeFile("todos.json", JSON.stringify(todos), (data) => {
      res.status(201).send(todo);
    });
  });
});

// 4
app.put("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;

    const todos = JSON.parse(data);
    const id = parseInt(req.params.id);
    let todoIndex = -1;
    for (const index in todos) {
      if (id === todos[index]["id"]) {
        todoIndex = index;
      }
    }
    if (todoIndex === -1) {
      res.sendStatus(404);
    } else {
      todos[todoIndex]["title"] = req.body.title;
      todos[todoIndex]["description"] = req.body.description;

      fs.writeFile("todos.json", JSON.stringify(todos), (data) => {
        res.send();
      });
    }
  });
});

// 5
app.delete("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;

    const todos = JSON.parse(data);
    const id = parseInt(req.params.id);
    let deleteIndex = -1;
    for (const todoIndex in todos) {
      if (id === todos[todoIndex]["id"]) {
        deleteIndex = todoIndex;
      }
    }
    if (deleteIndex === -1) {
      res.sendStatus(404);
    } else {
      todos.splice(deleteIndex, 1);

      fs.writeFile("todos.json", JSON.stringify(todos), (data) => {
        res.send();
      });
    }
  });
});

app.use((req, res, next) => {
  res.status(404).send();
});

// app.listen(port, () => {
//   console.log(`Example app listening on port ${port}`);
// });

module.exports = app;
