/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const PORT = 8000
const app = express();

app.use(bodyParser.json());

function idGen(){
  return Math.random().toString(36).substring(2, 6+2);
}

var todos = [
];

function listTodos(req,res){
  res.status(200).send(JSON.stringify(todos));
}

app.get("/todos",listTodos);

function listTodoById(req,res){
  var flag = false;
  var i;
  for(i=0;i<todos.length;++i){
    if(todos[i].id==req.params.id){
      flag=true;
      break;
    }
  }
  if(flag){
    res.status(200).send(JSON.stringify(todos[i]));
  }else{
    res.status(404).send("Todo with requested Id Not found");
  }
}

app.get("/todos/:id",listTodoById);

function addTodo(req,res){
  var idCreated = idGen();

  var newTodo = {
    id:idCreated,
    title:req.body.title,
    description:req.body.description,
    completed:req.body.completed
  }
  todos.push(newTodo);

  res.status(201).json({id:idCreated});
}

app.post("/todos",addTodo);

function updateTodo(req,res){
  var flag = false;
  var i;
  for(i=0;i<todos.length;++i){
    if(todos[i].id==req.params.id){
      flag=true;
      break;
    }
  }
  if(flag){
    todos[i].title = req.body.title;
    todos[i].description = req.body.description;
    todos[i].completed = req.body.completed;
    res.status(200).send("Todo Updated");
  }else{
    res.status(404).send("Todo not found");
  }
}

app.put("/todos/:id",updateTodo);

function deleteTodo(req,res){
  var flag = false;
  var i;
  for(i=0;i<todos.length;++i){
    if(todos[i].id==req.params.id){
      flag=true;
      break;
    }
  }
  if(flag){
    todos.splice(i,1);
    res.status(200).send("Todo Deleted");
  }else{
    res.status(404).send("Todo not found");
  }
}

app.delete("/todos/:id",deleteTodo);


function serverStart(){
  console.log(`todo app started at ${PORT}`)
}

// app.listen(PORT,serverStart);

module.exports = app;
