/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const port = 3000;

const app = express();

app.use(bodyParser.json());

app.get("/", (req, res) => {
  res.send("Todo List API");
});

let todos = [];

app.get("/todos", (req, res) => {
  res.status(200).send(todos)
});

const findTodo = (id) => {
  const todo = todos.find((todo) => todo.id == id);
  return todo || -1;
};

const getId = (idParam) => {
  const id = parseInt(idParam, 10);
  if (isNaN(id)) {
    return -1;
  } else {
    return id;
  }
};

app.get("/todos/:id", (req, res) => {
  const id = getId(req.params.id);
  if (id === -1) {
    res.status(404).send(`Error: invalid ID ${req.params.id}.`);
  } else {
    const todo = findTodo(id);
    if (todo !== -1) {
      res.status(200).send(todo);
    } else {
      res.status(404).send(`Error: ID not found.`);
    }
  }
});

app.post("/todos", (req, res) => {
  const title = req.body.title;
  const desc = req.body.description;
  const comp = req.body.completed;
  if (!title && !desc) {
    res.status(404).send(`Error: Todo not found.`)
  } else {
    const id = todos.length === 0 ? 1 : todos[todos.length - 1].id + 1;
    todos.push({
      id: id,
      title: title,
      description: desc,
      completed: !!comp
    });
    res.status(201).send({
      id: id
    });
  }
});

app.put("/todos/:id", (req, res) => {
  const id = getId(req.params.id);
  if (id === -1) {
    res.status(404).send(`Error: invalid ID ${req.params.id}.`);
  } else {
    const idx = todos.findIndex((todo) => todo.id == id);
    if (idx !== -1) {
      const title = req.body.title;
      const desc = req.body.description;
      const comp = req.body.completed;
      todos[idx] = {
        id: id,
        title: title,
        description: desc,
        completed: !!comp
      };
      res.status(200).send(`ID ${id} updated.`);
    } else {
      res.status(404).send(`Error: ID not found.`);
    }
  }
});

app.delete("/todos/:id", (req, res) => {
  const id = getId(req.params.id);
  if (id === -1) {
    res.status(404).send(`Error: invalid ID ${req.params.id}.`);
  } else {
    const idx = todos.findIndex((todo) => todo.id == id);
    if (idx !== -1) {
      todos.splice(idx, 1);
      res.status(200).send(`ID ${id} deleted.`);
    } else {
      res.status(404).send(`Error: ID not found.`);
    }
  }
});

app.get("*",(req,res)=>{
  res.status(404).send("Error PAGE NOT FOUND.")
})

//Comment listen when running test
app.listen(port, () => {
console.log("Listening on ", port);
});

module.exports = app;
