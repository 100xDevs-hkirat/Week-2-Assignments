"use strict";
/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const {v4: uuidv4} = require('uuid')
const fs = require('fs');

const app = express();

app.use(bodyParser.json());

/** utils start */
const constructTodo = (todo) => {
  return {
    id: uuidv4(),
    ...todo,
  };
}

const todoDBPath = './db/todoDB.json';

const writeTodosToFile = (todos) => {
  fs.writeFileSync(todoDBPath, JSON.stringify({todos}));
}

const readTodosFromFile = () => {
  const data = fs.readFileSync(todoDBPath, 'utf8');
  const todos = JSON.parse(data).todos;
  return todos;
}
/** utils end */

/** TodoList class start */
class TodoList {
  constructor() {
    this.todos = readTodosFromFile();
  }

  getTodos() {
    return this.todos;
  }

  getTodoById(id) {
    return this.todos.find(todo => todo.id === id);
  }

  createNewTodo(todo) {
    const newTodo = constructTodo(todo);
    this.todos.push(newTodo);
    writeTodosToFile(this.todos);
    return newTodo;
  }

  updateTodoById(id, todo) {
    const index = this.todos.findIndex(todo => todo.id === id);
    if (index === -1) {
      return null;
    }
    this.todos[index] = {
      ...this.todos[index],
      ...todo,
    };
    writeTodosToFile(this.todos);
    return this.todos[index];
  }

  deleteTodoById(id) {
    const index = this.todos.findIndex(todo => todo.id === id);
    if (index === -1) {
      return null;
    }
    writeTodosToFile(this.todos);
    return this.todos.splice(index, 1)[0];
  }
}
/** TodoList class end */

const todoList = new TodoList();

/** controllers start */
const getTodos = (req, res) => {
  res.status(200).send(todoList.getTodos());
}

const getTodo = (req, res) => {
  const todo = todoList.getTodoById(req.params.id);
  if (!todo) {
    res.status(404).send();
    return;
  }
  res.status(200).send(todo);
}

const createTodo = (req, res) => {
  const todo = todoList.createNewTodo({
    ...req.body,
  });
  res.status(201).send({
    id: todo.id,
  });
}

const updateTodo = (req, res) => {
  const todo = todoList.updateTodoById(req.params.id, {
    ...req.body,
  });
  if (!todo) {
    res.status(404).send();
    return;
  }
  res.status(200).send(todo);
}

const deleteTodo = (req, res) => {
  const todo = todoList.deleteTodoById(req.params.id);
  if (!todo) {
    res.status(404).send();
    return;
  }
  res.status(200).send(todo);
}
/** controllers end */

/** Routes start */
app.get('/todos', getTodos);
app.get('/todos/:id', getTodo);
app.post('/todos', createTodo);
app.put('/todos/:id', updateTodo);
app.delete('/todos/:id', deleteTodo);
app.use((_req, res) => res.status(404).send());
/** Routes end */

// app.listen(3000, () => console.log('Server listening on port 3000'));

module.exports = app;
