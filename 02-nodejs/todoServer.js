/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");

const app = express();

app.use(bodyParser.json());

const readJson = () => {
  try {
    const file = fs.readFileSync(path.resolve(__dirname, "./dbs/todos.json"));
    const todos = file ? JSON.parse(file) : [];
    return todos;
  } catch (err) {
    return [];
  }
};

const writeJson = (todosJSON) => {
  fs.writeFileSync(
    path.resolve(__dirname, "./dbs/todos.json"),
    JSON.stringify(todosJSON)
  );
};

const findTodo = (id) => {
  const todos = readJson();
  const todo = todos.find((todo) => todo.id === id);
  return todo;
};

app.get("/todos", (req, res) => {
  const todos = readJson();
  return res.status(200).send(todos);
});

app.post("/todos", (req, res) => {
  const todo = req.body;
  const todos = readJson();
  const id = new Date().getTime().toString();
  todos.push({ ...todo, id });
  writeJson(todos);
  return res.status(201).send({ id });
});

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;

  const todo = findTodo(id);
  if (todo) {
    return res.status(200).send(todo);
  } else {
    return res.status(404).send();
  }
});

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  const { title, completed, description } = req.body;

  let updatedTodo = {};
  if (title) {
    updatedTodo["title"] = title;
  }
  if (completed) {
    updatedTodo["completed"] = completed;
  }
  if (description) {
    updatedTodo["description"] = description;
  }

  const todo = findTodo(id);
  if (todo) {
    const todos = readJson();
    updatedTodo = { ...todo, ...updatedTodo };
    const updatedTodos = todos.map((todoObj) => {
      if (todoObj.id === id) {
        return updatedTodo;
      } else {
        return todoObj;
      }
    });
    writeJson(updatedTodos);
    return res.status(200).send(updatedTodo);
  } else {
    return res.status(404).send();
  }
});

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  const todo = findTodo(id);

  if (todo) {
    const todos = readJson();
    const updatedTodos = todos.filter((todoObj) => todoObj.id !== id);
    writeJson(updatedTodos);
    return res.status(200).send("Todo Deleted");
  } else {
    return res.status(404).send();
  }
});

app.use((req, res) => {
  return res.status(404).send("No route found");
});

// const port = 4000;

// app.listen(port, () => console.log(`Server started at port ${port}`));

module.exports = app;
