/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());
var todos=[]
var Randid=1

app.use(bodyParser.json());
app.get('/todos',(req,res)=>{
  res.json(todos)
})
//Get to do by id
app.get('/todos/:id',(req,res)=>{
  var findid=parseInt(req.params.id)
  var foundId=false
  for(var i=0;i<todos.length;i++){
    if(todos[i].id===findid){
      foundId=true;
      res.json(todos[i])
      break
    }
  }
  if(!foundId) res.status(404).send("Not Found")
})
//create a new todo
app.post('/todos',(req,res)=>{
  var todo={
    id:Randid++,
    title:req.body.title,
    description:req.body.description
  }
  todos.push(todo)
  res.status(201).json(todo)
  
})
//update a specific todo
app.put('/todos/:id',(req,res)=>{
  var findid=parseInt(req.params.id)
  var data=null
  for(var i=0;i<todos.length;i++){
    if(todos[i].id===findid){
      data=todos[i]
      todos[i].title=req.body.title
      todos[i].description=req.body.description
      break
    }
  }
  if(data){
    res.status(200).json(data)
  }
  else{
    res.status(404).send()
  }
  
})
//delete a specific todo
app.delete('/todos/:id',(req,res)=>{
  var findid=parseInt(req.params.id)
  var Exists=false
  for(var i=0;i<todos.length;i++){
    if(todos[i].id===findid){
      Exists=true
      todos.splice(i,1);
      res.sendStatus(200)
      break
    }
  }
  if(!Exists) res.sendStatus(404)
})
app.all('*',(req,res)=>{
  res.status(404).send("Route Not Found")
})

module.exports = app;
