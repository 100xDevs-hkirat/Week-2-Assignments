/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

// todos is an array of objects, using index of array as id, id = index + 1
const todos = [];

let counter = 0;

function getIndexById(id) {
  id = +id;
  for (let i = 0; i < todos.length; i++) {
    if (todos[i].id === id) {
      return i;
    }
  }

  return -1;
}

function getTodoById(id) {

  let idx = getIndexById(id);


  return (idx === -1) ? null : todos[idx];
}

function updateTodo(id, updates) {
  const idx = getIndexById(id);

  if (idx === -1) {
    return null;
  }

  todos[idx].title = updates.title;
  todos[idx].description = updates.description;

  return todos[idx];

}

function deleteTodo(id) {
  const idx = getIndexById(id);

  if (id === -1) {
    return null;
  }

  todos.splice(idx, 1);
  return 1;
}

// task 1
app.get('/todos', (req, res) => {
  res.json(todos);
})

// task 2
app.get('/todos/:id', (req, res) => {
  const result = getTodoById(req.params.id);

  if (result === null) {
    res.status(404).send('id not found');
  } else {
    res.json(result);
  }

})

// task 3
app.post('/todos', (req, res) => {
  ++counter;
  const newTodo = {
    id: counter,
    title: req.body.title,
    description: req.body.description,
  }

  todos.push(newTodo);
  res.status(201).json(newTodo);

})

// task 4
app.put('/todos/:id', (req, res) => {
  const id = req.params.id;
  const result = updateTodo(id, req.body);

  if (result === null) {
    res.status(404).send();
  } else {
    res.status(200).json(result);
  }
})

// task 5
app.delete('/todos/:id', (req, res) => {
  const id = req.params.id;
  const result = deleteTodo(id);

  if (result === null) {
    res.status(404).send();
  } else {
    res.json(todos);
  }
})


// app.listen(3000, () => {
//   console.log('server is on');
// })

module.exports = app;
