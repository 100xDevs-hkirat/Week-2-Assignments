/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const Todo = require("./todo");

const app = express();

app.use(bodyParser.json());

function displayAllTodos(req, res) {
  fs.readFile("./todoList.json", "utf-8", (err, data) => {
    if (err) {
      res.send("error");
      return;
    }
    res.status(200).send(data);
  });
}

function displayGivenTodo(req, res) {
  const id = req.params.id;
  fs.readFile("./todoList.json", "utf-8", (err, data) => {
    if (err) {
      res.send("error");
      return;
    }
    const todos = JSON.parse(data);
    for (todo of todos) {
      if (todo.id == id) {
        res.send(todo);
        return;
      }
    }
    res.status(404).send("error");
    return;
  });
}
function addData(todos) {
  const updatedData = JSON.stringify(todos);
  fs.writeFile("./todoList.json", updatedData, (err) => {
    if (err) {
      res.send("error");
      return;
    }
  });
}
function createTodo(req, res) {
  const todo = new Todo(
    uuidv4(),
    req.body.title,
    req.body.completed,
    req.body.description
  );
  fs.readFile("./todoList.json", "utf-8", (err, data) => {
    if (err) {
      res.send("error");
      return;
    }
    const todos = JSON.parse(data);
    todos.push(todo);
    addData(todos);
    res.status(201).send({ id: todo.id });
  });
}

function updateTodo(req, res) {
  const id = req.params.id;
  fs.readFile("./todoList.json", "utf-8", (err, data) => {
    if (err) {
      res.send("error");
      return;
    }
    let todos = JSON.parse(data);
    for (uid in todos) {
      if (todos[uid].id == id) {
        const title = (req.body.title == null)?todos[uid].title:req.body.title;
        const completed =(req.body.completed == null)?todos[uid].completed:req.body.completed;
        const description =(req.body.description == null)?todos[uid].description:req.body.description;
        const todo = new Todo(id, title, completed, description);
        todos[uid] = todo;
        addData(todos);
        res.send("updated todo");
        return;
      }
    }
    res.status(404).send("error");
    return;
  });
}
function deleteTodo(req, res) {
  const id = req.params.id;
  fs.readFile("./todoList.json", "utf-8", (err, data) => {
    if (err) {
      res.send("error");
      return;
    }
    let todos = JSON.parse(data);
    for (uid in todos) {
      if (todos[uid].id == id) {
        todos.splice(uid, 1);
        addData(todos);
        res.send("deleted todo");
        return;
      }
    }
    res.status(404).send("error");
    return;
  });
}
app.get("/todos", displayAllTodos);
app.get("/todos/:id", displayGivenTodo);
app.post("/todos", createTodo);
app.put("/todos/:id", updateTodo);
app.delete("/todos/:id", deleteTodo);

const port = 3000;
app.listen(port, () => {
  console.log(`Server is running in port ${port}`);
});

module.exports = app;
