/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs  = require('fs');


const app = express();

app.use(bodyParser.json());

let ISSUES =[];

let issues_count = 1;

app.get("/todos", (req, res) => {
    fs.readFile("./todos.txt", "utf8", (err, data) => {
        if(err){
            res.status(500).send();
        }else{
            ISSUES = JSON.parse(data);
        }
    })
    res.status(200).json(ISSUES);
})

app.get("/todos/:id", (req, res) => {
    const id = parseInt(req.params.id);
    fs.readFile("./todos.txt", "utf8", (err, data) => {
        if(err){
            res.status(500).send();
        }else{
            ISSUES = JSON.parse(data);
        }
    })
    const issue  =  ISSUES.find(issue => issue.id === id);
    if(!issue)return res.status(404).send();
    res.status(200).json(issue);
})

app.post("/todos", (req, res) => {
    const {title, completed, description} = req.body;
    if(!title || !description)return res.status(400).send("Please fill all the required fields");
    fs.readFile("./todos.txt", "utf8", (err, data) => {
        if(err){
            res.status(500).send();
        }else{
            ISSUES = JSON.parse(data);
        }
    })
    ISSUES.push({id:issues_count++, title: title, completed: completed, description: description});
    fs.writeFile("./todos.txt", JSON.stringify(ISSUES), (err ) => {
        if(err){res.status(500).send();}
    })
    res.status(201).send({id: issues_count-1});
})

app.put("/todos/:id", (req, res) => {
    const {title, completed, description} = req.body;
    const id = parseInt(req.params.id);
    fs.readFile("./todos.txt", "utf8", (err, data) => {
        if(err){
            res.status(500).send();
        }else{
            ISSUES = JSON.parse(data);
        }
    })
    const todo =  ISSUES.find(issue => issue.id === id);
    if(!todo)return res.status(404).send();
    ISSUES[id-1].title = title;
    ISSUES[id-1].completed = completed;
    ISSUES[id-1].description = description;
    fs.writeFile("./todos.txt", JSON.stringify(ISSUES), (err ) => {
        if(err){res.status(500).send();}
    })
    res.status(200).send();
})

app.delete("/todos/:id", (req, res) =>{
    const id = parseInt(req.params.id);
    fs.readFile("./todos.txt", "utf8", (err, data) => {
        if(err){
            res.status(500).send();
        }else{
            ISSUES = JSON.parse(data);
        }
    })
    const todo =  ISSUES.find(issue => issue.id === id);
    if(!todo)return res.status(404).send();
    ISSUES = ISSUES.filter(issue=> issue.id !== id);
    fs.writeFile("./todos.txt", JSON.stringify(ISSUES), (err ) => {
        if(err){res.status(500).send();}
    })
    res.status(200).send();
})




module.exports = app;
