/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `cd` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const uuid = require('uuid');
const fs = require('fs');

const app = express();
const port = 3001;

app.use(bodyParser.json());

let todos;

// reading file synchronously because the persisted todos should be read before it starts taking requests
const data = fs.readFileSync("./files/todoServer.txt", "utf8");
const mapAsArray = (data === undefined || data === '') ? [] : JSON.parse(data);
todos = new Map(mapAsArray);

app.listen(port, () => {
  console.log(`todoServer is listening on port ${port}!`);
});

app.get('/todos', (req, res) => {
  console.log("/todos (get) invoked ***********");
  res.send(JSON.stringify(Array.from(todos.values())));
});

app.get('/todos/:id', (req, res) => {
  console.log("/todos/:id (get) invoked ***********");
  const id = req.params['id'];
  if(todos.has(id)){
    res.send(todos.get(id));
  }else{
    res.status(404).send(`Todo with id : ${id} not found!`);
  }
});

app.post('/todos', (req,res) => {
  console.log("/todos (post) invoked ***********");
  const newId = uuid.v4();
  const newTodo = {
    id:newId,
    title:req.body.title,
    completed:req.body.completed,
    description:req.body.description
  }
  todos.set(newId, newTodo);
  persistTodos();
  console.log("added new todo "+JSON.stringify(todos));
  res.status(201).send(newTodo);
});

app.put('/todos/:id', (req, res) => {
  console.log("/todos/:id (put) invoked ***********");
  const id = req.params['id'];
  if(todos.has(id)){
    const todo = todos.get(id);
    if(req.body.title !== undefined) todo.title = req.body.title;
    if(req.body.description !== undefined) todo.description = req.body.description;
    if(req.body.completed !== undefined) todo.completed = req.body.completed;
    persistTodos();
    res.send(`Todo with id : ${id} has been updated!`);
  }else{
    res.status(404).send(`Todo with id : ${id} not found!`);
  }
});

app.delete('/todos/:id', (req, res) => {
  console.log("/todos/:id (delete) invoked ***********");
  const id = req.params['id'];
  if(todos.has(id)){
    todos.delete(id);
    persistTodos();
    res.send(`Todo with id : ${id} has been deleted!`);
  }else{
    res.status(404).send(`Todo with id : ${id} not found!`);
  }
});

// persist todos array to the todoServer.txt
function persistTodos(){
  const mapAsArray = Array.from(todos);
  fs.writeFile('./files/todoServer.txt', JSON.stringify(mapAsArray), (err) => {
    if (err) throw err;
    console.log('todos saved to file!');
  });
}

module.exports = app;
