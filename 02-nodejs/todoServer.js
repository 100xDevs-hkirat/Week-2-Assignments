/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const {ulid} = require('ulid');


const app = express();

app.use(bodyParser.json());

class Todo {
    constructor(title, description) {
        this.id = ulid();
        this.title = title;
        this.description = description;
        this.completed = false;
    }

    getTodo() {
        return {
            id: this.id,
            title: this.title,
            description: this.description,
            completed: this.completed
        }
    }
}

let index = 0;
let todos = [];
let todoIndex = {};
app.get("/todos", (req, res) => {
    return res.json(todos);
});

app.get("/todos/:id", (req, res) => {
    const id = req.params.id;
    if (!(id in todoIndex))
        return res.status(404).json({error: "Todo not found"});
    const todo = todos[todoIndex[id]]
    return res.json(todo)
});

app.post("/todos", (req, res) => {
    if (!req.body.title || !req.body.description) {
        return res.status(400).json({error: "title and description are required fields"})
    }
    const todo = new Todo(req.body.title, req.body.description).getTodo();
    todos.push(todo);
    todoIndex[todo.id] = index
    index += 1;
    return res.status(201).json({id: todo.id})
});

app.put("/todos/:id", (req, res) => {
    const validKeys = new Set(['title', 'description', 'completed']);
    for (const key in req.body)
        if (!validKeys.has(key))
            return res.status(400).json({error: `${key} is not a valid body`});
    const id = req.params.id;
    if (!(id in todoIndex))
        return res.status(404).json({error: `Todo ${id} not found`});
    for (const key in req.body) {
        todos[todoIndex[id]][key] = req.body[key];
    }
    return res.json({success: `Todo ${id} has been updated`})
});

app.delete("/todos/:id", (req, res) => {
    const id = req.params.id;
    if (!(id in todoIndex))
        return res.status(404).json({error: `Todo ${id} not found`});
    todos[todoIndex[id]] = {}
    delete todoIndex[id];
    return res.json({success: `Todo ${id} has been deleted`});
});

module.exports = app;
