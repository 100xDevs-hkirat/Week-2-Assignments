/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs')
  const port = 3000
  
  const app = express();
  
  app.use(bodyParser.json());
  
  function getAllTodos(req, res) {
    try {
      const data = fs.readFileSync('todos.json');
      const jsonData = JSON.parse(data);
      res.send(jsonData)
    } catch (error) {
        res.status(404).send("Error in getting the todos")
    }
  }
  
  function getTodoById(req, res) {
  
    let id = req.params.id

    try {
        const data = fs.readFileSync('todos.json');
        const jsonData = JSON.parse(data);
        let todos = jsonData.todos

        for(let i=0; i< todos.length; i++){
            if(todos[i].id == id){
              res.send(todos[i])
            }
          }

        res.status(404).send("Todo not found")
      } catch (error) {
          res.status(500).send("Error in fetching the todo")
      }
  }
  
  function addTodo(req , res) {
    
    let newTodo = req.body
    newTodo.id = Date.now()
    const data = fs.readFileSync('todos.json');
    //let data = newTodo.toString()
    const jsonData = JSON.parse(data);
    if(jsonData.todos){
        jsonData.todos.push(newTodo)
    }
    else{
        let todos = []
        todos.push(newTodo)
        jsonData.todos = todos
    }
    
    const jsonString = JSON.stringify(jsonData);

    try {
        fs.writeFileSync('todos.json', jsonString, 'utf-8')
    } catch (error) {
        res.status(500).send("Error in adding the todo")
        console.log(error)
    }

    res.send("Todos added successfully")
  }
  
  function updateTodo(req , res) {
  
    let id = req.params.id
    let newTodo = req.body
    let flag = true

    try {
        const data = fs.readFileSync('todos.json');
        const jsonData = JSON.parse(data);
        let todos = jsonData.todos
        let resData

        for(let i=0; i< todos.length; i++){
            if(todos[i].id == id){
                if(newTodo.title){
                    todos[i].title = newTodo.title
                  }
            
                if(newTodo.completed){
                    todos[i].completed = newTodo.completed
                  }
            
                if(newTodo.description){
                    todos[i].description = newTodo.description
                  }
                resData = todos[i]
                
            }
          }
        
        jsonData.todos = todos
        const jsonString = JSON.stringify(jsonData);
        fs.writeFileSync('todos.json', jsonString, 'utf-8')

        if(resData){
            res.status(201).send(resData)
        }
        else{
            res.status(404).send("Todo not found")
        }
      } catch (error) {
          res.status(500).send("Error in fetching the todo")
      }
    
  }
  
  function deleteTodo(req , res){
    
    let id = req.params.id
    let flag = false

    try {
        const data = fs.readFileSync('todos.json');
        const jsonData = JSON.parse(data);
        let todos = jsonData.todos

        for(let i=0; i< todos.length; i++){
            if(todos[i].id == id){
                flag = true
                todos[i] = todos[todos.length - 1] 
                todos.pop()
            }
          }
        
        jsonData.todos = todos
        const jsonString = JSON.stringify(jsonData);
        fs.writeFileSync('todos.json', jsonString, 'utf-8')
        
        if(flag){
            res.send("todo deleted Successfully")
        }
        else{
            res.status(404).send("Todo not found")
        }
      } catch (error) {
          res.status(500).send("Error in fetching the todo")
      }
  }
  
  app.get('/todos', getAllTodos)
  app.get('/todos/:id' , getTodoById)
  app.post('/todos', addTodo)
  app.put('/todos/:id' , updateTodo)
  app.delete('/todos/:id' , deleteTodo)
  
  app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
  })
  
  app.use((req, res, next) => {
    res.status(404).send();
  });

  module.exports = app;
  