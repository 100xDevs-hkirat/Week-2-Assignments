/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const cors = require("cors");
const app = express();
const PORT = 3000;
var allTodos = [];

app.use(express.json());
app.use(cors());

function checkId(id, allTodos) {
  for (let a = 0; a < allTodos.length; a++) {
    if (id == allTodos[a].id) {
      return true;
    }
  }
  return false;
}

function getTodoFromId(id, allTodos) {
  for (let a = 0; a < allTodos.length; a++) {
    if (allTodos[a].id == id) {
      return a;
    }
  }
  return null;
}

app.post("/todos", (req, res) => {
  const title = req.body.title;
  const completed = req.body.completed;
  const description = req.body.description;
  const id = uuidv4();
  fs.readFile("todos.json", { encoding: "utf-8" }, (err, data) => {
    if (!err) {
      var allTodos = JSON.parse(data);
      allTodos.push({
        id: id,
        title: title,
        description: description,
        completed: completed,
      });
      fs.writeFile("todos.json", JSON.stringify(allTodos), (err) => {
        if (!err) {
          res
            .status(201)
            .json({
              id: id,
              title: title,
              description: description,
              completed: completed,
            });
        }
      });
    }
  });
});

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("todos.json", { encoding: "utf-8" }, (err, data) => {
    if (!err) {
      var fData = JSON.parse(data);
      if (checkId(id, fData)) {
        var index = getTodoFromId(id, fData);
        if (index != null) {
          res.status(200).json(fData[index]);
        }
      } else {
        res.status(404).send("Not Found");
      }
    }
  });
});

app.get("/todos", (req, res) => {
  fs.readFile("todos.json", { encoding: "utf-8" }, (err, data) => {
    if (!err) {
      res.status(200).send(JSON.parse(data));
    } else {
      console.log(err);
    }
  });
});

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("todos.json", { encoding: "utf-8" }, (err, data) => {
    if (!err) {
      var fData = JSON.parse(data);
      if (checkId(id, fData)) {
        var index = getTodoFromId(id, fData);
        fData.splice(index, 1);
        fs.writeFile("todos.json", JSON.stringify(fData), (err) => {
          if (!err) {
            res.status(200).send("Deleted");
          }
        });
      } else {
        res.status(404).send("Not Found");
      }
    }
  });
});

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("todos.json", { encoding: "utf-8" }, (err, data) => {
    if (!err) {
      var fData = JSON.parse(data);
      if (checkId(id, fData)) {
        var index = getTodoFromId(id, fData);
        const title = req.body.title;
        const description = req.body.description;
        const completed = req.body.completed;
        const oldTodo = fData[index];

        if (title) {
          oldTodo.title = title;
        }
        if (description) {
          oldTodo.description = description;
        }
        if (completed) {
          oldTodo.completed = completed;
        }
        fs.writeFile("todos.json", JSON.stringify(fData), (err) => {
          if (!err) {
            res.status(200).send("updated");
          }
        });
      } else {
        res.status(404).send("Not Found");
      }
    }
  });
});

app.get("/", (req, res) => {
  res.sendFile(__dirname + "/index.html");
});

app.use((req, res, next) => {
  res.status(404).send("Not Found");
});

app.listen(PORT, () => {
  console.log(`Listening on http://localhost:${PORT}`);
});

module.exports = app;
